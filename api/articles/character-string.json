{"title":"Java 字符串—JAVA语言基础","uid":"a0b788c0a9c8204476e0b9b4b152450c","slug":"character-string","date":"2022-04-23T15:44:03.000Z","updated":"2022-05-09T12:36:26.187Z","comments":true,"path":"api/articles/character-string.json","keywords":null,"cover":[],"content":"<p>本篇从创建字符串开始向读者介绍字符串本身的特性，以及字符串上可用的几个操作等。</p>\n<p>通过阅读本章，您可以：</p>\n<p>​\t掌握字符串的创建方式</p>\n<p>​\t理解字符串连接的方式</p>\n<p>​\t掌握获取字符串信息的方式</p>\n<p>​\t掌握字符串的常用操作 </p>\n<p>​\t掌握字符串的格式化方法</p>\n<p>​\t理解正则表达式</p>\n<p>​\t掌握字符串生成器的用法</p>\n<h2 id=\"String类\"><a href=\"#String类\" class=\"headerlink\" title=\"String类\"></a>String类</h2><p>前面的章节中介绍了char类型，它只能表示单个字符，不能表示由多个字符连接而成的字符串。</p>\n<p>在Java语言中将字符串作为对象来处理， 可以通过java.lang包中的String类来创建字符串对象</p>\n<h3 id=\"声明字符串\"><a href=\"#声明字符串\" class=\"headerlink\" title=\"声明字符串\"></a>声明字符串</h3><p>在Java语言中字符串必须包含在一对双引号（” “）之内。</p>\n<p>如：<code>&quot;23.23&quot;、&quot;ABCDE&quot;、&quot;你好&quot;</code></p>\n<p>可以通过以下语法格式来声明字符串变量：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">String str ;</code></pre>\n\n<p>String：指定该变量为字符串类型。</p>\n<p>str：任意有效的标识符，表示字符串变量的名称。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>声明字符串变量必须经过初始化才能使用，否则编译器会报出“变量未被初始化错误”。</p></blockquote>\n<h3 id=\"创建字符串\"><a href=\"#创建字符串\" class=\"headerlink\" title=\"创建字符串\"></a>创建字符串</h3><p>String类的常用构造方法如下：</p>\n<p>（1） String(char a[])</p>\n<p>用一个字符数组a创建String对象，实例代码如下：</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220423235011146.png\" alt=\"image-20220423235011146\"></p>\n<p>（2） String(char a[], int offset, int length)</p>\n<p>提取字符数组a中的一部分创建一个字符串对象。参数offset表示开始截取字符串的位置，length表示截取字符串的长度。</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220423235304336.png\" alt=\"image-20220423235304336\"></p>\n<p>除通过以上几种使用String类的构造方法来创建字符串变量外，还可通过字符串常量的引用赋值给一个字符串变量。</p>\n<p><u>引用字符串常量来创建字符串变量，实例代码如下</u></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">String str1,str2;\nstr1 &#x3D; &quot;We are students&quot; srt2 &#x3D; &quot;We are students&quot;</code></pre>\n\n<h2 id=\"连接字符串\"><a href=\"#连接字符串\" class=\"headerlink\" title=\"连接字符串\"></a>连接字符串</h2><p>对于已声明的字符串，可以对其进行相应的操作。连接字符串就是字符操作中较简单的一种。</p>\n<h3 id=\"连接多个字符串\"><a href=\"#连接多个字符串\" class=\"headerlink\" title=\"连接多个字符串\"></a>连接多个字符串</h3><p>使用“+”运算符可实现连接多个字符串的功能。“+”运算符可以连接多个运算符并产生一个String对象。</p>\n<img src=\"https://img.i-nmb.cn/inmb/image-20220424000452690.png\" alt=\"在项目中创建类Join，在主方法中创建String型变量，并将字符变量连接的结果输出\" style=\"zoom:120%;\" />\n\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424000502955.png\" alt=\"结果\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Java中一句相连的字符串不能分开在两行中写。例如，下列语句的写法就是错误的。</p>\n<p>System.out.println(“I like Java”)</p>\n<p>如果一个字符串太长，为了便于阅读，必须将这个字符串分在两行上书写。则需要使用“+”将两个字符串连起来，之后在加号处换行。因此，上面的语句可以修改为：</p>\n<p>System.out.println(“I like”+ “Java”);</p></blockquote>\n<h3 id=\"连接其他数据类型\"><a href=\"#连接其他数据类型\" class=\"headerlink\" title=\"连接其他数据类型\"></a>连接其他数据类型</h3><p>字符串也可同其他基本数据类型进行连接。字符串同这些数据类型数据进行连接，会将这些数据直接转换成字符串</p>\n<img src=\"https://img.i-nmb.cn/inmb/image-20220424000629117.png\" alt=\"在项目中创建类Link，在主方法中创建数值型变量，实现将字符串与整型、浮点型变量相连的结果输出\" style=\"zoom:150%;\" />\n\n<p>本实例实现的是将字符串常量与整型变量booktime和浮点型变量practice相连后的结果输出。在这里booktime和practice都不是字符串，当它们与字符串相连时会自动调用toString()方法，将其转换成字符串形 式，然后参与连接。</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424000647412.png\" alt=\"结果\"></p>\n<h2 id=\"获取字符串信息\"><a href=\"#获取字符串信息\" class=\"headerlink\" title=\"获取字符串信息\"></a>获取字符串信息</h2><p>字符串作为对象，可通过相应方法获取字符串的有效信息，如获取某字符串的长度、某个索引位置的字符等。</p>\n<h3 id=\"获取字符串长度\"><a href=\"#获取字符串长度\" class=\"headerlink\" title=\"获取字符串长度\"></a>获取字符串长度</h3><p>使用String类的length()方法可获取声明的字符串对象的长度。</p>\n<p>语法：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">str.length();</code></pre>\n\n<p>其中，str为字符串对象</p>\n<p>例如：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">String str &#x3D; &quot;We are students&quot;;\nint size &#x3D; str.length();</code></pre>\n\n<h3 id=\"字符串查找\"><a href=\"#字符串查找\" class=\"headerlink\" title=\"字符串查找\"></a>字符串查找</h3><p>String类提供了两种查找字符串的方法，即indexOf()与lastIndexOf()</p>\n<p>（1） indexOf(String s)</p>\n<p>该方法用于返回参数字符串s在指定字符串中首次出现的索引位</p>\n<p>置。当调用字符串的indexOf()方法时，会从当前字符串的开始位置搜索</p>\n<p>s的位置；如果没有检索到字符串s，该方法的返回值是-1。</p>\n<p>语法如下：<code>str.indexOf(substr)</code></p>\n<p>str：任意字符串对象。</p>\n<p>substr：要搜索的字符串。</p>\n<p>例如：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">String str &#x3D; &quot;We are students&quot;;\nint size &#x3D; str.indexOf(&quot;a&quot;)</code></pre>\n\n<p>代码查找到a在字符串的位置（从0开始，直到3，所以size变量是3）</p>\n<p>（1） lastIndexOf(String str)</p>\n<p>该方法用于返回指定字符串最后一次出现的索引位置。当调用字符串的lastIndexOf()方法时，会从当前字符串的开始位置检索参数字符串str，并将最后一次出现str的索引位置返回。如果没有检索到字符串str，该方法返回-1。</p>\n<p>语法如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">str. lastIndexOf(substr)</code></pre>\n\n<p>在项目中创建类Text，在主方法中创建String对象，使用lastIndexOf()方法查看字符串str中空字符串的位置，然后输出字符串的长度，看它们是否相同。</p>\n<img src=\"https://img.i-nmb.cn/inmb/image-20220424001425783.png\" alt=\"实例\" style=\"zoom:150%;\" />\n\n<p>结果：</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424001457672.png\" alt=\"结果\"></p>\n<h3 id=\"获取指定索引位置的字符\"><a href=\"#获取指定索引位置的字符\" class=\"headerlink\" title=\"获取指定索引位置的字符\"></a>获取指定索引位置的字符</h3><p>使用charAt()方法可将指定索引处的字符返回。语法如下：</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/wps20.png\" alt=\"img\"></p>\n<p>str：任意字符串</p>\n<p>index：整型值，用于指定要返回字符的下标</p>\n<img src=\"https://img.i-nmb.cn/inmb/image-20220424001611351.png\" alt=\"在项目中创建类Ref，在主方法中创建String对象，使用charAt()方法查看字符串str中索引位置是6的字符。\" style=\"zoom:150%;\" />\n\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424001627942.png\" alt=\"运行结果\"></p>\n<h2 id=\"字符串操作\"><a href=\"#字符串操作\" class=\"headerlink\" title=\"字符串操作\"></a>字符串操作</h2><p>String类中包含了很多方法，允许程序员对字符串进行操作来满足实际编程中的需要。</p>\n<h3 id=\"获取子字符串\"><a href=\"#获取子字符串\" class=\"headerlink\" title=\"获取子字符串\"></a>获取子字符串</h3><p>通过String类的substring()方法可对字符串进行截取。这些方法的共同点就是都利用字符串的下标进行截取，且应明确字符串下标是从0开始的。</p>\n<p>substring()方法被两种不同的方法重载，来满足不同的需要。</p>\n<h4 id=\"（1）-substring-int-beginIndex\"><a href=\"#（1）-substring-int-beginIndex\" class=\"headerlink\" title=\"（1） substring(int beginIndex)\"></a>（1） substring(int beginIndex)</h4><p>该方法返回的是从指定的索引位置开始截取直到该字符串结尾的子串。</p>\n<p>语法如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">str.substring(int beginIndex)</code></pre>\n\n<p>其中，beginIndex指定从某一索引处开始截取字符串</p>\n<p>例如</p>\n<img src=\"https://img.i-nmb.cn/inmb/image-20220424001745519.png\" alt=\"实例\" style=\"zoom:150%;\" />\n\n<img src=\"https://img.i-nmb.cn/inmb/image-20220424001758591.png\" alt=\"使用substring(beginIndex)截取字符串的过程\" style=\"zoom:150%;\" />\n\n\n\n<p>ubstring() 方法返回字符串的子字符串。</p>\n<h5 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">public String substring(int beginIndex)\n\n或\n\npublic String substring(int beginIndex, int endIndex)</code></pre>\n\n<h5 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h5><ul>\n<li><strong>beginIndex</strong> – 起始索引（包括）, 索引从 0 开始。</li>\n<li><strong>endIndex</strong> – 结束索引（不包括）。</li>\n</ul>\n<p><img src=\"https://img.i-nmb.cn/inmb/java-substring-20201208.png\" alt=\"img\"></p>\n<h5 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h5><p>子字符串。</p>\n<h5 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class RunoobTest &#123;\n    public static void main(String args[]) &#123;\n        String Str &#x3D; new String(&quot;This is text&quot;);\n \n        System.out.print(&quot;返回值 :&quot; );\n        System.out.println(Str.substring(4) );\n \n        System.out.print(&quot;返回值 :&quot; );\n        System.out.println(Str.substring(4, 10) );\n    &#125;\n&#125;</code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">返回值 : is text\n返回值 : is te</code></pre>\n\n\n\n\n\n<h4 id=\"（2）-substring-int-beginIndex-int-endIndex\"><a href=\"#（2）-substring-int-beginIndex-int-endIndex\" class=\"headerlink\" title=\"（2） substring(int beginIndex, int endIndex)\"></a>（2） substring(int beginIndex, int endIndex)</h4><p>该方法返回的是从字符串某一索引位置开始截取至某一索引位置结束的子串。</p>\n<p>语法如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">substring(int beginIndex, int endIndex)</code></pre>\n\n\n\n<img src=\"https://img.i-nmb.cn/inmb/image-20220424001903645.png\" alt=\"在项目中创建类Subs，在主方法中创建String对象，实现使用substring()方法对字符串进行截取，并将截取后形成的新串输出。\" style=\"zoom:150%;\" />\n\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424001914462.png\" alt=\"运行结果\"></p>\n<h3 id=\"去除空格\"><a href=\"#去除空格\" class=\"headerlink\" title=\"去除空格\"></a>去除空格</h3><p>trim()方法返回字符串的副本，忽略前导空格和尾部空格</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">str.trim()</code></pre>\n\n<img src=\"https://img.i-nmb.cn/inmb/image-20220424002457196.png\" alt=\"在项目中创建类Blak，在主方法中创建String对象，将字符变量原来的长度与去掉前导和尾部空格后的长度输出。\" style=\"zoom:150%;\" />\n\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424002510820.png\" alt=\"运行结果\"></p>\n<h3 id=\"字符串替换\"><a href=\"#字符串替换\" class=\"headerlink\" title=\"字符串替换\"></a>字符串替换</h3><p>语法如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">str.replace(char oldChar,char newChar)</code></pre>\n\n<p>oldChar：要替换的字符或字符串</p>\n<p>newChar：用于替换原来字符串的内容</p>\n<p>replace()方法返回的结果是一个新的字符串。如果字符串oldChar没有出现在该对象表达式中的字符串序列中，则将原字符串返回。</p>\n<img src=\"https://img.i-nmb.cn/inmb/image-20220424002614981.png\" alt=\"在项目中创建类NewStr，在主方法中创建String型变量，将字符变量中的字母a替换成A后的结果输出。\" style=\"zoom:150%;\" />\n\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424002625939.png\" alt=\"运行结果\"></p>\n<h3 id=\"判断字符串的开始与结尾\"><a href=\"#判断字符串的开始与结尾\" class=\"headerlink\" title=\"判断字符串的开始与结尾\"></a>判断字符串的开始与结尾</h3><p>startsWith()方法与endsWith()方法分别用于判断字符串是否以指定的内容开始或结束。这两个方法的返回值都为boolean类型。</p>\n<h4 id=\"（1）-startsWith-方法\"><a href=\"#（1）-startsWith-方法\" class=\"headerlink\" title=\"（1） startsWith()方法\"></a>（1） startsWith()方法</h4><p>该方法用于判断当前字符串对象的前缀是否为参数指定的字符串。</p>\n<p>语法如下：</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/wps21.png\"></p>\n<h4 id=\"（2）-endsWith-方法\"><a href=\"#（2）-endsWith-方法\" class=\"headerlink\" title=\"（2） endsWith()方法\"></a>（2） endsWith()方法</h4><p>该方法用于判断当前字符串是否为以给定的子字符串结束。</p>\n<p>语法如下：</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/wps22.png\"></p>\n<img src=\"https://img.i-nmb.cn/inmb/image-20220424002836861.png\" alt=\"在项目中创建类StartOrEnd，在主方法中创建String型变量，并判断变量的前导和后置字符串。\" style=\"zoom:150%;\" />\n\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424002849915.png\" alt=\"运行结果\"></p>\n<h3 id=\"判断字符串是否相等\"><a href=\"#判断字符串是否相等\" class=\"headerlink\" title=\"判断字符串是否相等\"></a>判断字符串是否相等</h3><p>对字符串对象进行比较不能简单地使用比较运算符“&#x3D;&#x3D;”，因为比较运算符比较的是两个字符串的地址是否相同。即使两个字符串的内容相同，两个对象的内存地址也是不同的，使用比较运算符仍然会返回 false。</p>\n<p>使用比较运算符比较两个字符串，实例代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">String tom &#x3D; new String(&quot;I am a student&quot;);\nString jerry &#x3D; new String(&quot;I am a student&quot;);\nboolean b &#x3D; (tom &#x3D;&#x3D; jerry);</code></pre>\n\n<p>此时，布尔型变量b的值为false，因为字符串是对象，tom、jerry是引用。</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424003004819.png\" alt=\"image-20220424003004819\"></p>\n<p>因此，要比较两个字符串内容是否相等，应使用equals()方法和</p>\n<p>equalsIgnoreCase()方法。</p>\n<h4 id=\"（1）-equals-方法\"><a href=\"#（1）-equals-方法\" class=\"headerlink\" title=\"（1） equals()方法\"></a>（1） equals()方法</h4><p>如果两个字符串具有相同的字符和长度，则使用equals()方法进行比较时，返回true。</p>\n<p>语法如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">str.equals(String otherstr)</code></pre>\n\n<p>其中，str、otherstr是要比较的两个字符串对象。</p>\n<h4 id=\"（2）-equalsIgnoreCase-方法\"><a href=\"#（2）-equalsIgnoreCase-方法\" class=\"headerlink\" title=\"（2） equalsIgnoreCase()方法\"></a>（2） equalsIgnoreCase()方法</h4><p>使用equals()方法对字符串进行比较时是区分大小写的，而使用equalsIgnoreCase()方法是在忽略了大小写的情况下比较两个字符串是否相等，返回结果仍为boolean类型。</p>\n<p>语法如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">str.equalsIgnoreCase(String otherstr)</code></pre>\n\n<p>其中，str、otherstr是要比较的两个字符串对象。</p>\n<img src=\"https://img.i-nmb.cn/inmb/image-20220424003252863.png\" alt=\"在项目中创建类Opinion，在主方法中创建String型变量，实现判断两个字符串是否相等，并将结果输出。\" style=\"zoom:150%;\" />\n\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424003419680.png\" alt=\"运行结果\"></p>\n<h3 id=\"按字典顺序比较两个字符串\"><a href=\"#按字典顺序比较两个字符串\" class=\"headerlink\" title=\"按字典顺序比较两个字符串\"></a>按字典顺序比较两个字符串</h3><p>compareTo()方法为按字典顺序比较两个字符串，该比较基于字符串中各个字符的Unicode值，按字典顺序将此String对象表示的字符序列与参数字符串所表示的字符序列进行比较。</p>\n<p>如果按字典顺序此String对象位于参数字符串之前，则比较结果为一个负整数；如果按字典顺序此String对象位于参数字符串之后，则比较结果为一个正整数；如果这两个字符串相等，则结果为0。</p>\n<p>语法如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">str.compareTo(String otherstr)</code></pre>\n\n<p>其中，str、otherstr是要比较的两个字符串对象。</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424020644862.png\" alt=\"在项目中创建类Wordbook，在主方法中创建String变量，使用compareTo()方法将字符变量进行比较，并将比较结果输出。\"></p>\n<img src=\"https://img.i-nmb.cn/inmb/image-20220424020708809.png\" alt=\"运行结果\" style=\"zoom:50%;\" />\n\n\n\n<p>compareTo() 方法用于将 Number 对象与方法的参数进行比较。可用于比较 Byte, Long, Integer等。</p>\n<p>该方法用于两个相同数据类型的比较，两个不同类型的数据不能用此方法来比较。</p>\n<h5 id=\"参数-1\"><a href=\"#参数-1\" class=\"headerlink\" title=\"参数\"></a>参数</h5><p><strong>referenceName</strong> – 可以是一个 Byte, Double, Integer, Float, Long 或 Short 类型的参数。</p>\n<h5 id=\"返回值-1\"><a href=\"#返回值-1\" class=\"headerlink\" title=\"返回值\"></a>返回值</h5><ul>\n<li>如果指定的数与参数相等返回 0。</li>\n<li>如果指定的数小于参数返回 -1。</li>\n<li>如果指定的数大于参数返回 1。</li>\n</ul>\n<h5 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Test&#123;\n\tpublic static void main(String args[])&#123;\n\tInteger x &#x3D; 5;\n\tSystem.out.println(x.compareTo(3));\n\tSystem.out.println(x.compareTo(5));\n\tSystem.out.println(x.compareTo(8));\n\t&#125;\n&#125;</code></pre>\n\n<p>编译以上程序，输出结果为：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1\n0\n-1</code></pre>\n\n<h3 id=\"字母大小写转换\"><a href=\"#字母大小写转换\" class=\"headerlink\" title=\"字母大小写转换\"></a>字母大小写转换</h3><p>字符串的toLowerCase()方法可将字符串中的所有字符从大写字母改写为小写字母，而toUpperCase()方法可将字符串中的小写字母改写为大写字母。</p>\n<h4 id=\"（1）-toLowerCase-方法\"><a href=\"#（1）-toLowerCase-方法\" class=\"headerlink\" title=\"（1） toLowerCase()方法\"></a>（1） toLowerCase()方法</h4><p>该方法将String转换为小写。如果字符串中没有应该被转换的字符，则将原字符串返回；否则将返回一个新的字符串，将原字符串中每个该进行小写转换的字符都转换成等价的小写字符。字符长度与原字符长度相同。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">str.toLowerCase()</code></pre>\n\n<p>其中，str是要进行转换的字符串。</p>\n<h5 id=\"返回值-2\"><a href=\"#返回值-2\" class=\"headerlink\" title=\"返回值\"></a>返回值</h5><p>转换为小写的字符串。</p>\n<h5 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Test &#123;\n    public static void main(String args[]) &#123;\n        String Str &#x3D; new String(&quot;WWW.I-NMB.COM&quot;);\n        System.out.print(&quot;返回值 :&quot; );\n        System.out.println( Str.toLowerCase() );\n    &#125;\n&#125;</code></pre>\n\n<p>以上程序执行结果为：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">返回值 :www.i-nmb.com</code></pre>\n\n<h4 id=\"（2）-toUpperCase-方法\"><a href=\"#（2）-toUpperCase-方法\" class=\"headerlink\" title=\"（2） toUpperCase()方法\"></a>（2） toUpperCase()方法</h4><p>该方法将String转换为大写。如果字符串中没有应该被转换的字符，则将原字符串返回；否则返回一个新字符串，将原字符串中每个该进行大写转换的字符都转换成等价的大写字符。新字符长度与原字符长度相同。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">str.toUpperCase()</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>使用toLowerCase()方法和toUpperCase()方法进行大小写转换时， 数字或非字符不受影响</p></blockquote>\n<h5 id=\"返回值-3\"><a href=\"#返回值-3\" class=\"headerlink\" title=\"返回值\"></a>返回值</h5><p>字符转换为大写后的字符串。</p>\n<h5 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Test &#123;\n    public static void main(String args[]) &#123;\n        String Str &#x3D; new String(&quot;www.i-nmb.com&quot;);\n        System.out.print(&quot;返回值 :&quot; );\n        System.out.println( Str.toUpperCase() );\n    &#125;\n&#125;</code></pre>\n\n<p>以上程序执行结果为：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">返回值 :WWW.I-NMB.COM</code></pre>\n\n\n\n<h3 id=\"字符串分割\"><a href=\"#字符串分割\" class=\"headerlink\" title=\"字符串分割\"></a>字符串分割</h3><p>使用split()方法可以使字符串按指定的分割字符或字符串对内容进行分割，并将分割后的结果存放在字符串数组中。split()方法提供了以下两种字符串分割形式。</p>\n<h4 id=\"（1）-split-String-sign\"><a href=\"#（1）-split-String-sign\" class=\"headerlink\" title=\"（1） split(String sign)\"></a>（1） split(String sign)</h4><p>该方法可根据给定的分割符对字符串进行拆分。</p>\n<h5 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">str.split(String sign)</code></pre>\n\n<p>sign为分割字符串的分割符，也可以使用正则表达式</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>没有统一的对字符进行分割的符号。如果想定义多个分割符，可使用符号“|”。例如，“,|&#x3D;”表示分割符分别为“,”和“&#x3D;”。</p></blockquote>\n<h5 id=\"（2）-split-String-sign-int-limit\"><a href=\"#（2）-split-String-sign-int-limit\" class=\"headerlink\" title=\"（2） split(String sign,int limit)\"></a>（2） split(String sign,int limit)</h5><p>该方法可根据给定的分割符对字符串进行拆分，并限定拆分的次数。</p>\n<h5 id=\"语法-2\"><a href=\"#语法-2\" class=\"headerlink\" title=\"语法\"></a>语法</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">str.split(String sign,int limit)</code></pre>\n\n<p>sign：分割字符串的分割符，也可以使用正则表达式</p>\n<p>limit：限制的分割次数</p>\n<h5 id=\"例-1\"><a href=\"#例-1\" class=\"headerlink\" title=\"例 1\"></a>例 1</h5><p>使用 split() 方法对字符串进行分割的实例如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args)\n&#123;\n    String Colors&#x3D;&quot;Red,Black,White,Yellow,Blue&quot;;\n    String[] arr1&#x3D;Colors.split(&quot;,&quot;);    &#x2F;&#x2F;不限制元素个数\n    String[] arr2&#x3D;Colors.split(&quot;,&quot;,3);    &#x2F;&#x2F;限制元素个数为3\n    System.out.println(&quot;所有颜色为：&quot;);\n    for(int i&#x3D;0;i&lt;arr1.length;i++)\n    &#123;\n        System.out.println(arr1[i]);\n    &#125;\n    System.out.println(&quot;前三个颜色为：&quot;);\n    for(int j&#x3D;0;j&lt;arr2.length;j++)\n    &#123;\n        System.out.println(arr2[j]);\n    &#125;\n&#125;</code></pre>\n\n<p>输出结果如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">所有颜色为：\nRed\nBlack\nWhite\nYellow\nBlue\n前三个颜色为：\nRed\nBlack\nWhite,Yellow,Blue</code></pre>\n\n<h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h4><h2 id=\"格式化字符串\"><a href=\"#格式化字符串\" class=\"headerlink\" title=\"格式化字符串\"></a>格式化字符串</h2><p>String类的静态format()方法用于创建格式化的字符串。format()方法有两种重载形式。</p>\n<h4 id=\"（1）-format-String-format-Object…args\"><a href=\"#（1）-format-String-format-Object…args\" class=\"headerlink\" title=\"（1） format(String format,Object…args)\"></a>（1） format(String format,Object…args)</h4><p>该方法使用指定的格式字符串和参数返回一个格式化字符串，格式化后的新字符串使用本地默认的语言环境。</p>\n<h5 id=\"语法-3\"><a href=\"#语法-3\" class=\"headerlink\" title=\"语法\"></a>语法</h5><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">str.format(String format,Object…args)</code></pre>\n\n<p>format：格式字符串</p>\n<p>args：格式字符串中由格式说明符引用的参数。如果还有格式说明符以外的参数，则忽略这些额外的参数。此参数的数目是可变的，可以为0</p>\n<h4 id=\"（2）-format-Local-l-String-format-Object…args\"><a href=\"#（2）-format-Local-l-String-format-Object…args\" class=\"headerlink\" title=\"（2） format(Local l,String format,Object…args)\"></a>（2） format(Local l,String format,Object…args)</h4><p>l ：格式化过程中要应用的语言环境。如果l为null，则不进行本地化。</p>\n<h3 id=\"日期和时间字符串格式化\"><a href=\"#日期和时间字符串格式化\" class=\"headerlink\" title=\"日期和时间字符串格式化\"></a>日期和时间字符串格式化</h3><p>在应用程序设计中，经常需要显示时间和日期。如果想输出满意的日期和时间格式，一般需要编写大量的代码经过各种算法才能实现。format()方法通过给定的特殊转换符作为参数来实现对日期和时间的格式化。</p>\n<h4 id=\"1-日期格式化\"><a href=\"#1-日期格式化\" class=\"headerlink\" title=\"1. 日期格式化\"></a><strong>1.</strong> 日期格式化</h4><img src=\"https://img.i-nmb.cn/inmb/image-20220424022909309.png\" alt=\"返回一个月中的天数，实例代码\" style=\"zoom:150%;\" />\n\n<p>上述代码中变量s的值是当前日期中的天数，如今天是15号，则s的值为15；%te是转换符。常用的日期格式化转换符如表</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424023144063.png\" alt=\"常用的日期格式化转换符\"></p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424023226684.png\" alt=\"在项目中创建类Eval，实现将当前日期信息以4位年份、月份全称、2位日期形式输出\"></p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424023241895.png\" alt=\"结果\"></p>\n<h4 id=\"2-时间格式化\"><a href=\"#2-时间格式化\" class=\"headerlink\" title=\"2. 时间格式化\"></a><strong>2.</strong> 时间格式化</h4><p>使用format()方法不仅可以完成日期的格式化，也可以实现时间的格式化。时间格式化转换符要比日期转换符更多、更精确，它可以将时间格式化为时、分、秒、毫秒。</p>\n<h3 id=\"常规类型格式化\"><a href=\"#常规类型格式化\" class=\"headerlink\" title=\"常规类型格式化\"></a>常规类型格式化</h3><p>常规类型的格式化可应用于任何参数类型，可通过如表5.4所示的转换符来实现。</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424023415012.png\" alt=\"常规转换符\"></p>\n<img src=\"https://img.i-nmb.cn/inmb/image-20220424023503409.png\" alt=\"在项目中创建类General，在主方法中实现不同数据类型到字符串的转换。\" style=\"zoom:150%;\" />\n\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424023521017.png\" alt=\"运行结果\"></p>\n<h2 id=\"使用正则表达式\"><a href=\"#使用正则表达式\" class=\"headerlink\" title=\"使用正则表达式\"></a>使用正则表达式</h2><p>正则表达式通常被用于判断语句中，用来检查某一字符串是否满足某一格式。正则表达式是含有一些具有特殊意义字符的字符串，这些特殊字符称为正则表达式的元字符。例如，“\\d”表示数字0~9中的任何一个，“\\d”就是元字符。</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424023743825.png\" alt=\"正则表达式中的元字符\"></p>\n","text":"本篇从创建字符串开始向读者介绍字符串本身的特性，以及字符串上可用的几个操作等。 通过阅读本章，您可以： ​ 掌握字符串的创建方式 ​ 理解字符串连接的方式 ​ 掌握获取字符串信息的方式 ​ 掌握字符串的常用操作 ​ 掌握字符串的格式化方法 ​ 理解正则表达式 ​ 掌握字符串生成器...","link":"","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"Eclipse","slug":"Eclipse","count":7,"path":"api/tags/Eclipse.json"},{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#String%E7%B1%BB\"><span class=\"toc-text\">String类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A3%B0%E6%98%8E%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">声明字符串</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">创建字符串</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%9E%E6%8E%A5%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">连接字符串</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%9E%E6%8E%A5%E5%A4%9A%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">连接多个字符串</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%9E%E6%8E%A5%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">连接其他数据类型</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">获取字符串信息</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6\"><span class=\"toc-text\">获取字符串长度</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE\"><span class=\"toc-text\">字符串查找</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%B4%A2%E5%BC%95%E4%BD%8D%E7%BD%AE%E7%9A%84%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">获取指定索引位置的字符</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">字符串操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">获取子字符串</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89-substring-int-beginIndex\"><span class=\"toc-text\">（1） substring(int beginIndex)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">语法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">参数</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">返回值</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">实例</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89-substring-int-beginIndex-int-endIndex\"><span class=\"toc-text\">（2） substring(int beginIndex, int endIndex)</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%BB%E9%99%A4%E7%A9%BA%E6%A0%BC\"><span class=\"toc-text\">去除空格</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9B%BF%E6%8D%A2\"><span class=\"toc-text\">字符串替换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%BC%80%E5%A7%8B%E4%B8%8E%E7%BB%93%E5%B0%BE\"><span class=\"toc-text\">判断字符串的开始与结尾</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89-startsWith-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">（1） startsWith()方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89-endsWith-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">（2） endsWith()方法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E7%9B%B8%E7%AD%89\"><span class=\"toc-text\">判断字符串是否相等</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89-equals-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">（1） equals()方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89-equalsIgnoreCase-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">（2） equalsIgnoreCase()方法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%89%E5%AD%97%E5%85%B8%E9%A1%BA%E5%BA%8F%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">按字典顺序比较两个字符串</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8F%82%E6%95%B0-1\"><span class=\"toc-text\">参数</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9E%E5%80%BC-1\"><span class=\"toc-text\">返回值</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B-1\"><span class=\"toc-text\">实例</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">字母大小写转换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89-toLowerCase-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">（1） toLowerCase()方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9E%E5%80%BC-2\"><span class=\"toc-text\">返回值</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B-2\"><span class=\"toc-text\">实例</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89-toUpperCase-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">（2） toUpperCase()方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9E%E5%80%BC-3\"><span class=\"toc-text\">返回值</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B-3\"><span class=\"toc-text\">实例</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%86%E5%89%B2\"><span class=\"toc-text\">字符串分割</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89-split-String-sign\"><span class=\"toc-text\">（1） split(String sign)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95-1\"><span class=\"toc-text\">语法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89-split-String-sign-int-limit\"><span class=\"toc-text\">（2） split(String sign,int limit)</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95-2\"><span class=\"toc-text\">语法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E4%BE%8B-1\"><span class=\"toc-text\">例 1</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">格式化字符串</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89-format-String-format-Object%E2%80%A6args\"><span class=\"toc-text\">（1） format(String format,Object…args)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95-3\"><span class=\"toc-text\">语法</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89-format-Local-l-String-format-Object%E2%80%A6args\"><span class=\"toc-text\">（2） format(Local l,String format,Object…args)</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A0%BC%E5%BC%8F%E5%8C%96\"><span class=\"toc-text\">日期和时间字符串格式化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96\"><span class=\"toc-text\">1. 日期格式化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96\"><span class=\"toc-text\">2. 时间格式化</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%84%E7%B1%BB%E5%9E%8B%E6%A0%BC%E5%BC%8F%E5%8C%96\"><span class=\"toc-text\">常规类型格式化</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">使用正则表达式</span></a></li></ol>","author":{"name":"ACbug战队","slug":"blog-author","avatar":"https://img1.i-nmb.cn/ava.png","link":"/","description":"西北民族大学数学与计算机科学学院<br>系统与软件工作室网络安全组","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Java 数组—JAVA语言基础","uid":"4f0f7aced0ab37b53159f295f5420300","slug":"array","date":"2022-04-24T02:45:43.000Z","updated":"2022-05-09T12:36:08.941Z","comments":true,"path":"api/articles/array.json","keywords":null,"cover":[],"text":"通过阅读本篇，您可以： 掌握一维数组的创建和使用方法 掌握二维数组的创建和使用方法 了解如何遍历数组 了解如何填充替换数组中的元素 了解如何对数组进行排序 了解如何复制数组 了解查询数组的方法 数组概述数组是具有相同数据类型的一组数据的集合。数组中的每个元素具有相同的数据类型。 ...","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"Eclipse","slug":"Eclipse","count":7,"path":"api/tags/Eclipse.json"},{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"}],"author":{"name":"ACbug战队","slug":"blog-author","avatar":"https://img1.i-nmb.cn/ava.png","link":"/","description":"西北民族大学数学与计算机科学学院<br>系统与软件工作室网络安全组","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"流程控制—JAVA语言基础","uid":"df5c047b2c921ac68be6d4ab3ee5a04d","slug":"Process-control","date":"2022-04-23T15:04:09.000Z","updated":"2022-05-09T12:35:18.877Z","comments":true,"path":"api/articles/Process-control.json","keywords":null,"cover":[],"text":"通过阅读本章，您可以： 理解Java语言中复合语句的使用方法 掌握if条件语句的使用方法 了解if语句与switch语句的区别 掌握while循环语句的使用方法 掌握do…while循环语句的使用方法 了解while语句与do…while语句的区别 掌握for语句的使用方法 了解...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Eclipse","slug":"Eclipse","count":7,"path":"api/tags/Eclipse.json"},{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"}],"author":{"name":"ACbug战队","slug":"blog-author","avatar":"https://img1.i-nmb.cn/ava.png","link":"/","description":"西北民族大学数学与计算机科学学院<br>系统与软件工作室网络安全组","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}