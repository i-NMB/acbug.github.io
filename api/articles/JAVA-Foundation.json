{"title":"JAVA语言基础","uid":"776335ad07aa1b3bbc04ba130dffe2bc","slug":"JAVA-Foundation","date":"2022-04-23T06:12:34.000Z","updated":"2022-04-30T14:28:02.027Z","comments":true,"path":"api/articles/JAVA-Foundation.json","keywords":null,"cover":[],"content":"<p>通过阅读本篇，您可以：<br>　了解Java主类结构</p>\n<p>　了解Java语言中的基本数据类型</p>\n<p>　理解Java语言中的常量与变量</p>\n<p>　掌握Java语言运算符的使用</p>\n<p>　理解Java语言数据类型的转换</p>\n<p>　了解Java语言中的代码注释与编码规范</p>\n<h2 id=\"Java主类结构\"><a href=\"#Java主类结构\" class=\"headerlink\" title=\"Java主类结构\"></a>Java主类结构</h2><p>Java语言是面向对象的程序设计语言，Java程序的基本组成单元是类，类体中又包括属性与方法两部分。每一个应用程序都必须包含一个main()方法，含有main()方法的类称为主类。</p>\n<p>在Eclipse下依次创建项目item、包Number和类Frist。创建完成后，即可得到以下代码：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package Number;\n\npublic class Frist &#123;\n\n&#125;</code></pre>\n\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220417144500802.png\"></p>\n<p>在类体中输入以下代码，实现在控制台上输出“你好Java”</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package Number;\npublic class Frist &#123;\n\tstatic String s1 &#x3D;&quot;你好&quot;;\n\tpublic static void main(String[] args)&#123;\n\t\tString s2 &#x3D; &quot;Java&quot;;\n\t\tSystem.out.println(s1);\n\t\tSystem.out.println(s2);\n\t&#125;\n&#125;</code></pre>\n\n\n\n<img src=\"https://img.i-nmb.cn/inmb/image-20220417150715988.png\" alt=\"输出“你好Java”\" style=\"zoom:200%;\" />\n\n<p>文件名必须和类名Frist同名，即Frist.java。还要注意大小写，Java 是区分大小写的。 </p>\n<h3 id=\"包声明\"><a href=\"#包声明\" class=\"headerlink\" title=\"包声明\"></a>包声明</h3><p>一个Java应用程序是<strong>由若干个类组成</strong>的,上述例子的包声明就是“package Number; ”，因为package就是包声明</p>\n<img src=\"https://img.i-nmb.cn/inmb/image-20220417195929441.png\" alt=\"image-20220417195929441\" style=\"zoom:150%;\" />\n\n\n\n\n\n<h3 id=\"类声明\"><a href=\"#类声明\" class=\"headerlink\" title=\"类声明\"></a>类声明</h3><p>通常将类的<u>属性</u>称为类的<u>全局变量</u>（成员变量），将<strong>方法中</strong>的属性称为<strong>局部变量</strong>。</p>\n<p>上例的s1为成员变量而s2属于局部变量，因为s1在类中声明并没有任何方法中，而s2在方法public static void main(String[] args)中</p>\n<h3 id=\"编写主方法\"><a href=\"#编写主方法\" class=\"headerlink\" title=\"编写主方法\"></a>编写主方法</h3><p>main()方法是<strong>类体中的主方法</strong>。该方法从“{”开始，至“}”结束。</p>\n<p>其中main()方法中的权限修饰符为public，静态修饰符为static、返回值修饰符为void。Java程序中的main()方法必须声明为public static void。</p>\n<p>main()方法是程序开始执行的位置。</p>\n<h3 id=\"导入API类库\"><a href=\"#导入API类库\" class=\"headerlink\" title=\"导入API类库\"></a>导入<strong>API</strong>类库</h3><p>在Java语言中可以通过import关键字<u>导入相关的类</u>。在JDK的API中（应用程序接口）提供了如java.awt、java.io等130多个包。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>可以通过 JDK的API文档来查看这些类，其中主要包括类的继承结构、类的应用、成员变量表、构造方法表等，并对每个变量的使用目的作了详细的描述，API文档是程序开发人员不可或缺的工具。 </p></blockquote>\n<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><p>在Java中有8种基本数据类型来存储数值、字符和布尔值</p>\n<img src=\"https://img.i-nmb.cn/inmb/image-20220417211300924.png\" alt=\"image-20220417211300924\" style=\"zoom:50%;\" />\n\n\n\n<h3 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h3><p>整数类型用来存储整数数值，即没有小数部分的数值。可以是正数，也可以是负数。</p>\n<h4 id=\"十进制：\"><a href=\"#十进制：\" class=\"headerlink\" title=\"十进制：\"></a>十进制：</h4><p>除了数字0，不能以0作为其他十进制数的开头</p>\n<h4 id=\"八进制：\"><a href=\"#八进制：\" class=\"headerlink\" title=\"八进制：\"></a>八进制：</h4><p>八进制：如0123（转换成十进制数为83）、-0123（转换成十进制数为-83），<strong>八进制数必须以0开头。</strong> </p>\n<h4 id=\"十六进制\"><a href=\"#十六进制\" class=\"headerlink\" title=\"十六进制\"></a>十六进制</h4><p>十六进制：如0x25（转换成十进制数为37）、0Xb01e（转换成十进制数为45086）。十六进制以 0X或者0x 开头</p>\n<p>其中整数类型可分为byte、short、int和 long 4种类型，</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220417212043590.png\" alt=\"image-20220417212043590\"></p>\n<h3 id=\"浮点类型\"><a href=\"#浮点类型\" class=\"headerlink\" title=\"浮点类型\"></a>浮点类型</h3><p>浮点类型表示有小数部分的数字。Java语言中浮点类型分为单精度浮点类型（float）和双精度浮点类型（double）。</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220417212255254.png\" alt=\"image-20220417212255254\"></p>\n<p>在默认情况下，小数都被看作double型，<strong>若使用float型小数，则需要在小数后面添加F或f</strong></p>\n<p>可以使用后缀d或D来明确表明这是一个double类型数据，不加d不会出错，但声明float型变量时如果不加f，系统会认为变量是double类型，从而出错。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">float f1 &#x3D; 13.23f;\ndouble d1 &#x3D; 4562.12d;\ndouble d2 &#x3D; 45678.1564;</code></pre>\n\n\n\n<h3 id=\"字符类型\"><a href=\"#字符类型\" class=\"headerlink\" title=\"字符类型\"></a>字符类型</h3><h4 id=\"char型\"><a href=\"#char型\" class=\"headerlink\" title=\"char型\"></a>char型</h4><p>字符类型（char）用于存储单个字符，占用16位（两个字节）内存</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">char x &#x3D; &#39;a&#39;;\n&#x2F;&#x2F;char x &#x3D; 97;</code></pre>\n\n<p>同C和C++语言一样，Java语言也可以把字符作为整数对待。由于 unicode编码采用无符号编码，可以存储65536个字符(0x0000~0xffff）</p>\n<h4 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h4><img src=\"https://img.i-nmb.cn/inmb/image-20220417213021108.png\" alt=\"转义字符\" style=\"zoom:70%;\" />\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">char c1 &#x3D; &#39;&#39;;\t\t\t\t&#x2F;&#x2F;将转义字符叶’赋值给变量c1\nchar char1 &#x3D; &#39;lu2605&#39;;\t\t&#x2F;&#x2F;将转义字符lu2605’赋值给变量char1\nSystem.out.println(c1);\t\t&#x2F;&#x2F;输出结果\\\nSystem.out.println(char1);\t&#x2F;&#x2F;输出结果★</code></pre>\n\n\n\n<h4 id=\"布尔类型\"><a href=\"#布尔类型\" class=\"headerlink\" title=\"布尔类型\"></a>布尔类型</h4><p>布尔类型又称逻辑类型，通过关键字boolean来定义布尔类型变量， 只有true和false两个值别代表布尔逻辑中的“真”和“假”。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">boolean b;\t\t\t&#x2F;&#x2F;定义布尔型变量b\nboolean b1,b2;\t\t&#x2F;&#x2F;定义布尔型变量b1、b2\nboolean b &#x3D; true;\t&#x2F;&#x2F;定义布尔型变量b，并赋给初值true</code></pre>\n\n\n\n<h2 id=\"变量与常量\"><a href=\"#变量与常量\" class=\"headerlink\" title=\"变量与常量\"></a>变量与常量</h2><h3 id=\"标识符和关键字\"><a href=\"#标识符和关键字\" class=\"headerlink\" title=\"标识符和关键字\"></a>标识符和关键字</h3><h4 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h4><p>标识符就好似一个名字来标识类名、变量名、方法名、数组名、文件名</p>\n<p>Java语言规定<strong>标识符由任意顺序的字母、下画线（_）、美元符号（$）和数字组成</strong>，并且<strong>第一个字符不能是数字</strong>。标识符<u>不能是Java中的保留关键字</u>。</p>\n<p>合法标识符：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">name\nuser_age\n$page</code></pre>\n\n\n\n<p>非法标识符：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">4word\nString\nUser name</code></pre>\n\n\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在Java语言中标识符中的字母是严格区分大小写的，如good和Good 是不同的两个标识符。</p>\n<p>Java语言中的字母不仅包括通常的拉丁文字a、 b、c等，还包括汉字、日文以及其他许多语言中的文字。</p></blockquote>\n<h4 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h4><p>关键字是Java语言中已经被赋予特定意义的一些单词</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220418141622697.png\" alt=\"关键字表\"></p>\n<h3 id=\"声明变量\"><a href=\"#声明变量\" class=\"headerlink\" title=\"声明变量\"></a>声明变量</h3><p>定义变量就是要告诉编译器（compiler）这个变量的数据类型，这样，编译器就会分配对应的空间给它，并且让编译器知道他能存放的数据。</p>\n<p>在程序运行过程中，<strong>空间内的值是变化的，这个内存空间就称为变量</strong>。为了便于操作，给这个空间取个名字，称为变量名。变量的命名必须是合法的标识符。</p>\n<p>在声明变量时可以是没有赋值，也可以是直接赋给初值。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int a;\t\t&#x2F;&#x2F;声明一个名称为a的 int 型变量\nchar b&#x3D;&#39;r&#39;\t&#x2F;&#x2F;声明一个名称叫b的 char型变量并且将字母&#39;r&#39;赋值给b</code></pre>\n\n<p>对于变量的命名并不是随意的，应遵循以下几条规则： </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>变量名必须是一个有效的标识符。</p>\n<p>变量名不可以使用Java中的关键字。</p>\n<p>变量名不能重复。</p>\n<p>应选择有意义的单词作为变量名。</p></blockquote>\n<h3 id=\"声明常量\"><a href=\"#声明常量\" class=\"headerlink\" title=\"声明常量\"></a>声明常量</h3><p>在程序运行过程中一直不会改变的量称为常量（constant），常量在整个程序中<strong>只能被赋值一次。</strong></p>\n<p>在Java语言中声明一个常量，除了要指定数据类型外，还需要通过 final关键字进行限定。声明常量的标准语法如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">final 数据类型    常量名称[&#x3D;值]</code></pre>\n\n<p>常量名通常使用大写字母，但这并不是必需的。<u>大写字母表示常量，是为了清楚地表明正在使用常量。</u></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">final double Pl&#x3D;3.1415926D;\t\t&#x2F;&#x2F;声明double 型常量PI并赋值\nfinal boolean BOOL &#x3D; true;\t\t&#x2F;&#x2F;声明boolean型常量BOOL并赋值</code></pre>\n\n<p>当常量属于“成员变量”时，必须在定义时就设定它的初值，否则将会产生编译错误。</p>\n<img src=\"https://img.i-nmb.cn/inmb/image-20220419000545207.png\" alt=\"例如\" style=\"zoom:67%;\" />\n\n<img src=\"https://img.i-nmb.cn/inmb/image-20220419000657144.png\" alt=\"运行结果\" style=\"zoom:50%;\" />\n\n<h3 id=\"变量的有效范围\"><a href=\"#变量的有效范围\" class=\"headerlink\" title=\"变量的有效范围\"></a>变量的有效范围</h3><p>在程序中，一般会根据变量的“有效范围”将变量分为“成员变量”和“局部变量”。</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220423213758825.png\"></p>\n<h4 id=\"成员变量\"><a href=\"#成员变量\" class=\"headerlink\" title=\"成员变量\"></a>成员变量</h4><p>在<u>类体中所定义的变量</u>被称为<u>成员变量</u>，成员变量在整个类中都有效。类的成员变量又可分为两种，即<u>静态变量</u>和<u>实例变量</u>。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">class var&#123;\n\tint x &#x3D; 45; \n\tstatic int y &#x3D; 90\n&#125;</code></pre>\n\n<p>在上面的代码中：x为实例变量，y为静态变量（也称类变量）</p>\n<p>就是说，如果在成员变量的类型前面加上关键字static，这样的成员变量称为<strong>静态变量</strong>。静态变量的有效范围<strong>可以跨类</strong>，甚至可达到整个应用程序之内，还能直接以“类名.静态变量”的方式在其他类内使用。</p>\n<h4 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h4><p>在类的方法体中定义的变量（方法内部定义，“{”与“}”之间的代码中声明的变量）称为局部变量。<u>局部变量只在当前代码块中有效</u>。在<u>类的方法</u>中声明的变量，包括方法的参数，都属于局部变量</p>\n<p>局部变量只在当前定义的方法内有效，不能用于类的其他方法中。</p>\n<p>局部变量可与成员变量的名字相同，此时成员变量将被隐藏，即这个（同名）成员变量在此方法中<strong>暂时失效</strong>。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Val&#123;\n    static int times &#x3D; 3;\n    public static void main(String[] args)&#123;\n        int times &#x3D; 4;\n        System.out.println(&quot;times的值为：&quot;+times);\n    &#125;\n&#125;</code></pre>\n\n<img src=\"https://img.i-nmb.cn/inmb/image-20220423213828334.png\" alt=\"运行结果\" style=\"zoom:150%;\" />\n\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><p>Java中提供了丰富的运算符，如赋值运算符、算术运算符、比较运算符等。</p>\n<h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><p>赋值运算符以符号“&#x3D;”表示，它是一个二元运算符（对两个操作数作处理），其功能是将右方操作数所含的值赋给左方的操作数。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int a &#x3D; 100;</code></pre>\n\n<p>该表达式是将100赋值给变量a。左方的操作数必须是一个变量，而右边的操作数则可以是任何表达式，包括变量（如a、number）、常量（如123、’book’）、有效的表达式（如45*12）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int a &#x3D; 10;\t&#x2F;&#x2F;声明int型变量a\nint b &#x3D; 5;\t&#x2F;&#x2F;声明int型变量b\nint c &#x3D; a+b;&#x2F;&#x2F;将变量a与b运算后的结果赋值给c</code></pre>\n\n<p>遵循赋值运算符的运算规则，可知系统将先计算a+b的值，结果为15，然后将15赋值给变量c，因此c&#x3D;15。</p>\n<p>由于赋值运算符“&#x3D;”处理时会先取得右方表达式处理后的结果，因此一个表达式中若含有两个以上的“&#x3D;”运算符，会从<strong>最右方的“&#x3D;”开始处理</strong>。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Eval&#123;\n    public static void main(String[] args)&#123;\n        int a,b,c;\n        a &#x3D; 15;\n        c &#x3D; b &#x3D; a + 4;\n        System.out.println(&quot;c的值为：&quot; + c);\n        System.out.println(&quot;b的值为：&quot; + b);\n    &#125;\n&#125;</code></pre>\n\n<p>运行结果</p>\n<img src=\"https://img.i-nmb.cn/inmb/image-20220423215102161.png\" alt=\"image-20220423215102161\" style=\"zoom:150%;\" />\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在Java中可以把赋值运算符连在一起使用。如：</p>\n<p>x &#x3D; y &#x3D; z &#x3D; 5;</p>\n<p>在这个语句中，变量x、y、z都得到同样的值5。但在实际开发中不建议使用这种赋值语句。</p></blockquote>\n<h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><p>Java中的算术运算符主要有+（加）、-（减）、*（乘）、&#x2F;（除）、%（求余），它们都是二元运算符。Java中算术运算符的功能及使用方式如表</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220423215326446.png\" alt=\"Java算术运算符\"></p>\n<p>其中，“+”和“-”运算符还可以作为数据的正负符号，如+5、-7</p>\n<p>在项目中创建类Arith，在主方法中定义变量，使用算术运算符将变量的计算结果输出。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Arith &#123;\t\t\t\t\t\t\t\t&#x2F;&#x2F;创建类\npublic static void main(String[] args) &#123;\t\t\t&#x2F;&#x2F;主方法\n    float number1 &#x3D; 45.56f;\t\t\t\t\t\t\t&#x2F;&#x2F;声明float型变量并赋值\n    int number2 &#x3D; 152;\t\t\t\t\t\t\t\t&#x2F;&#x2F;声明int型变量并赋值\n    System.out.println(&quot;和为:&quot;+( number1 + number2));\t&#x2F;&#x2F;将变量相加之和输出\n    System.out.println(&quot;差为:&quot;+(number2 - number1));\t&#x2F;&#x2F;将变量相减之差输出\n    System.out.println(&quot;积为:&quot;+number1 * number2);\t&#x2F;&#x2F;将变量相乘的积输出\n    System.out.println(&quot;商为:&quot;+number1 &#x2F; number2);\t&#x2F;&#x2F;将变量相除的商输出\n&#125;\n&#125;</code></pre>\n\n<p>运行结果</p>\n<img src=\"https://img.i-nmb.cn/inmb/image-20220423215938555.png\" alt=\"运行结果\" style=\"zoom:150%;\" />\n\n<h3 id=\"自增和自减运算符\"><a href=\"#自增和自减运算符\" class=\"headerlink\" title=\"自增和自减运算符\"></a>自增和自减运算符</h3><p>操作元必须是一个整型或浮点型变量。自增、自减运算符的作用是使变量的值增1或减1。</p>\n<p>当运算符在前时，先进行运算，后操作。当运算符在后时，先操作，后进行运算。</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220423220207437.png\" alt=\"自增或自减\"></p>\n<p>粗略地分析，++a与a++的作用都相当于a &#x3D; a+1。假设a &#x3D; 4，则：</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220423220247132.png\"></p>\n<p>再看另一个语法，同样假设a &#x3D; 4，则：</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220423220304753.png\"></p>\n<h3 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h3><p>比较运算符属于二元运算符，用于程序中的变量之间、变量和自变量之间以及其他类型的信息之间的比较。比较运算符的运算结果是boolean型。当运算符对应的关系成立时，运算结果为true，否则为 false。所有比较运算符通常作为判断的依据用在条件语句中。比较运算符共有6个，如表</p>\n<img src=\"https://img.i-nmb.cn/inmb/image-20220423220957332.png\" alt=\"比较运算符\" style=\"zoom:150%;\" />\n\n<p>在项目中创建类Compare，在主方法中创建整型变量， 使用比较运算符对变量进行比较运算，并将运算后的结果输出。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Compare &#123;\t\t\t\t\t&#x2F;&#x2F;创建类\n\tpublic static void main(Stringargs)&#123;\n   \t int number1 &#x3D; 4;\t\t\t\t\t&#x2F;&#x2F;声明int型变量number1\n   \t int number2 &#x3D; 5;\t\t\t\t\t&#x2F;&#x2F;声明int型变量number2\n&#x2F;*依次将变量number1与变量number2的比较结果输出*&#x2F;\n        System.out.println(&quot;number1&gt;number的返回值为:&quot;+(number1 &gt; number2));\n\t\tSystem.out.println(&quot;number1&lt; number2返回值为:&quot;+(number1 &lt; number2));\n\t\tSystem.out.println(&quot;number1&#x3D;&#x3D;number2返回值为:&quot;+ (number1&#x3D;&#x3D; number2));\n\t\tSystem.out.println(&quot;number1!&#x3D;number2返回值为:&quot;+ (number1 !&#x3D; number2));\n\t\tSystem.out.println(&quot;number1&gt;&#x3D; number2返回值为:&quot;+(number1 &gt;&#x3D; number2));\n\t\tSystem.out.println(&quot;number1&lt;&#x3D;number2返回值为:&quot;+(number1 &lt;&#x3D; number2));\n\t&#125;\n&#125;</code></pre>\n\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220423222700166.png\" alt=\"运行结果\"></p>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><p>返回类型为布尔值的表达式，如比较运算符，可以被组合在一起构成一个更复杂的表达式。这是通过逻辑运算符来实现的。</p>\n<p>逻辑运算符表如下</p>\n<img src=\"https://img.i-nmb.cn/inmb/image-20220423222842853.png\" alt=\"image-20220423222842853\" style=\"zoom:100%;\" />\n\n<p>使用逻辑运算符进行逻辑运算表如下</p>\n<img src=\"https://img.i-nmb.cn/inmb/image-20220423222907829.png\" alt=\"逻辑运算符进行逻辑运算表\" style=\"zoom:100%;\" />\n\n<p>在项目中创建类Calculation，在主方法中创建整型变量，使用逻辑运算符对变量进行运算，并将运算结果输出。</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220423223016167.png\" alt=\"image-20220423223016167\"></p>\n<p>运行结果如图</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220423223025314.png\" alt=\"运行结果\"></p>\n<h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><p>位运算符除“按位与”和“按位或”运算符外，其他只能用于处理整数的操作数。位运算是完全针对位方面的操作。整型数据在内存中以二进制的形式表示，如int型变量7的二进制表示是00000000 00000000 00000000 00000111。</p>\n<p>左边最高位是符号位，最高位是0表示正数，若为1则表示负数。负数采用补码表示，如-8的二进制表示为111111111 111111111 1111111 11111000。这样就可以对整型数据进行按位运算。</p>\n<h4 id=\"“按位与”运算\"><a href=\"#“按位与”运算\" class=\"headerlink\" title=\"“按位与”运算\"></a>“按位与”运算</h4><p>“按位与”运算的运算符为“&amp;”，为双目运算符。“按位与”运算的运算法则是：如果两个整型数据a、b对应位都是1，则结果位才是1，否则为0。如果两个操作数的精度不同，则结果的精度与精度高的操作数相同。</p>\n<h4 id=\"“按位或”运算\"><a href=\"#“按位或”运算\" class=\"headerlink\" title=\"“按位或”运算\"></a>“按位或”运算</h4><p>“按位或”运算的运算符为“|”，为双目运算符。“按位或”运算的运算法则是：如果两个操作数对应位都是0，则结果位才是0，否则为1。如果两个操作数的精度不同，则结果的精度与精度高的操作数相同</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220423223701811.png\" alt=\"5&amp;-4的运算过程\"></p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220423223715541.png\" alt=\"3|6的运算过程\"></p>\n<h4 id=\"“按位取反”运算\"><a href=\"#“按位取反”运算\" class=\"headerlink\" title=\"“按位取反”运算\"></a>“按位取反”运算</h4><p>“按位取反”运算也称“按位非”运算，运算符为“~”，为单目运算符。“按位取反”就是将操作数二进制中的1修改为0，0修改为1</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220423223834521.png\" alt=\"~7的运算过程\"></p>\n<h4 id=\"“按位异或”运算\"><a href=\"#“按位异或”运算\" class=\"headerlink\" title=\"“按位异或”运算\"></a>“按位异或”运算</h4><p>“按位异或”运算的运算符是“^”，为双目运算符。“按位异或”运算的运算法则是：当两个操作数的二进制表示相同（同时为0或同时为1） 时，结果为0，否则为1。若两个操作数的精度不同，则结果数的精度与精度高的操作数相同</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220423223910056.png\" alt=\"image-20220423223910056\"></p>\n<p>除了上述运算符之外，还可以对数据按二进制位进行移位操作。</p>\n<p>Java中的移位运算符有以下3种。</p>\n<h5 id=\"1-lt-lt-：左移\"><a href=\"#1-lt-lt-：左移\" class=\"headerlink\" title=\"1.&lt;&lt;：左移\"></a>1.&lt;&lt;：左移</h5><p>左移就是将运算符左边的操作数的二进制数据，按照运算符右边操作数指定的位数向左移动，</p>\n<h5 id=\"2-gt-gt-：右移。\"><a href=\"#2-gt-gt-：右移。\" class=\"headerlink\" title=\"2.&gt;&gt;：右移。\"></a>2.&gt;&gt;：右移。</h5><p>右边移空的部分补0。右移则复杂一些。当使用“&gt;&gt;”符号时，如果最高位是0，右移空的位就填入0；如果最高位是1，右移空的位就填入1</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220423224256449.png\" alt=\"image-20220423224256449\"></p>\n<p>3.&gt;&gt;&gt;：无符号右移。</p>\n<p>Java还提供了无符号右移“&gt;&gt;&gt;”，无论最高位是0还是1，左侧被移空的高位都填入0。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>移位运算符适用的数据类型有byte、short、char、int和long。</p>\n<p>移位可以实现整数除以或乘以2n的效果。例如，y&lt;&lt;2与y*4的结果相同；y&gt;&gt;1的结果与y&#x2F;2的结果相同。总之，一个数左移n位，就是将这个数乘以2n；一个数右移n位，就是将这个数除以2n。</p></blockquote>\n<h3 id=\"三元运算符\"><a href=\"#三元运算符\" class=\"headerlink\" title=\"三元运算符\"></a>三元运算符</h3><p>三元运算符的使用格式为：<code>条件式?值1:值2</code></p>\n<p>三元运算符的运算规则为：若条件式的值为true，则整个表达式取值1，否则取值2。例如：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">boolean b &#x3D; 20&lt;45?true:false;</code></pre>\n\n<p>如上例所示，表达式“20&lt;45”的运算结果返回真，那么boolean型变量b取值为true；相反，表达式“45&lt;20”返回为假，则boolean型变量b取值false。</p>\n<p>三元运算符等价于if…else语句。</p>\n<h3 id=\"运算符优先级\"><a href=\"#运算符优先级\" class=\"headerlink\" title=\"运算符优先级\"></a>运算符优先级</h3><p>通常优先级由高到低的顺序依次是：</p>\n<p><strong>增量和减量运算&gt;算术运算&gt;比较运算&gt;逻辑运算&gt;赋值运算</strong></p>\n<p>如果两个运算有相同的优先级，那么左边的表达式要比右边的表达式先被处理。</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220423224741068.png\" alt=\"image-20220423224741068\"></p>\n<h2 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h2><p>类型转换是将一个值从一种类型更改为另一种类型的过程。例如， 可以将String类型的数据“457”转换为数值型，也可以将任意类型的数据转换为String类型。</p>\n<p>如果从低精度数据类型向高精度数据类型转换，则永远不会溢出， 并且总是成功的；而把高精度数据类型向低精度数据类型转换时，则会有信息丢失，有可能失败。</p>\n<p>数据类型转换有两种方式，即<strong>隐式转换与显式转换。</strong></p>\n<h3 id=\"隐式类型转换\"><a href=\"#隐式类型转换\" class=\"headerlink\" title=\"隐式类型转换\"></a>隐式类型转换</h3><p>从低级类型向高级类型的转换，系统将自动执行，程序员无须进行任何操作。这种类型的转换称为<strong>隐式转换</strong></p>\n<p>这些类型按精度从低到高排列的顺序为byte &lt; short &lt; int &lt; long &lt; float &lt; double</p>\n<p>使用int型变量为float型变量赋值，此时int型变量将隐式转换成float型变量。</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220423224921618.png\" alt=\"image-20220423224921618\"></p>\n<p>此时执行输出语句，y的结果将是50.0</p>\n<img src=\"https://img.i-nmb.cn/inmb/image-20220423224935754.png\" alt=\"种数据类型转换的一般规则\" style=\"zoom:150%;\" />\n\n<h3 id=\"显式类型转换\"><a href=\"#显式类型转换\" class=\"headerlink\" title=\"显式类型转换\"></a>显式类型转换</h3><p>当把高精度的变量的值赋给低精度的变量时，必须使用显式类型转换运算（又称强制类型转换）</p>\n<p>语法为：<code>(类型名)要转换的值</code></p>\n<p>将不同的数据类型进行显式类型转换</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220423225119706.png\" alt=\"image-20220423225119706\"></p>\n<p>执行显式类型转换时，可能会导致精度损失。除boolean类型以外其他基本类型，都能以显式类型的方法实现转换。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>当把整数赋值给一个byte、short、int、long型变量时，不可以超出这些变量的取值范围，否则必须进行强制类型转换。例如：</p>\n<p>byte b &#x3D; (byte)129;</p></blockquote>\n<h2 id=\"代码注释与编码规范\"><a href=\"#代码注释与编码规范\" class=\"headerlink\" title=\"代码注释与编码规范\"></a>代码注释与编码规范</h2><p>在程序代码中适当地添加注释，可以提高程序的可读性和可维护性。好的编码规范可以使程序更易阅读和理解。</p>\n<h3 id=\"代码注释\"><a href=\"#代码注释\" class=\"headerlink\" title=\"代码注释\"></a>代码注释</h3><p>通过在程序代码中添加注释可提高程序的可读性。</p>\n<p>注释中包含了程序的信息，可以帮助程序员更好地阅读和理解程序。</p>\n<p>在Java源程序文件的任意位置都可添加注释语句。注释中的文字Java编译器不进行编译， 所有代码中的注释文字对程序不产生任何影响。Java语言提供了3种添加注释的方法，分别为单行注释、多行注释和文档注释。</p>\n<h4 id=\"单行注释\"><a href=\"#单行注释\" class=\"headerlink\" title=\"单行注释\"></a>单行注释</h4><p>“&#x2F;&#x2F;”为单行注释标记，从符号“&#x2F;&#x2F;”开始直到换行为止的所有内容均作为注释而被编译器忽略。</p>\n<p>语法如下：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td><img src=\"https://img.i-nmb.cn/inmb/wps5.png\" alt=\"img\"></td>\n</tr>\n</tbody></table>\n<p>例如，以下代码为声明的int型变量添加注释：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td><img src=\"https://img.i-nmb.cn/inmb/wps6.png\" alt=\"img\"></td>\n</tr>\n</tbody></table>\n<h4 id=\"多行注释\"><a href=\"#多行注释\" class=\"headerlink\" title=\"多行注释\"></a>多行注释</h4><p>“&#x2F; * * &#x2F;”为多行注释标记，符号“&#x2F;* ”与“*&#x2F;”之间的所有内容均为注释内容。注释中的内容可以换行。</p>\n<p>语法如下：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td><img src=\"https://img.i-nmb.cn/inmb/wps7.png\" alt=\"img\"></td>\n</tr>\n</tbody></table>\n<p><img src=\"https://img.i-nmb.cn/inmb/wps8.png\" alt=\"img\"></p>\n<p>但在多行注释中不可以嵌套多行注释，以下代码为非法：</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/wps10.png\" alt=\"img\"></p>\n<h4 id=\"文档注释\"><a href=\"#文档注释\" class=\"headerlink\" title=\"文档注释\"></a>文档注释</h4><p>“&#x2F;** * &#x2F;”为文档注释标记。符号“&#x2F;**”与“ *&#x2F;”之间的内容均为文档注释内容。当文档注释出现在声明（如类的声明、类的成员变量的声明、类的成员方法声明等）之前时，会被Javadoc文档工具读取作为Javadoc文档内容。文档注释的格式与多行注释的格式相同。对于初学者而言，文档注释并不是很重要，了解即可。</p>\n<h3 id=\"编码规范\"><a href=\"#编码规范\" class=\"headerlink\" title=\"编码规范\"></a>编码规范</h3><p>在学习开发的过程中要养成良好的编码习惯，因为规范的代码格式会给程序的开发与日后的维护提供很大方便。</p>\n<h6 id=\"每条语句要单独占一行，一条命令要以分号结束。\"><a href=\"#每条语句要单独占一行，一条命令要以分号结束。\" class=\"headerlink\" title=\"每条语句要单独占一行，一条命令要以分号结束。\"></a>每条语句要单独占一行，一条命令要以分号结束。</h6><h6 id=\"在声明变量时，尽量使每个变量的声明单独占一行，即使是相同的数据类型也要将其放置在单独的一行上，这样有助于添加注释。对于局部变量应在声明的同时对其进行初始化。\"><a href=\"#在声明变量时，尽量使每个变量的声明单独占一行，即使是相同的数据类型也要将其放置在单独的一行上，这样有助于添加注释。对于局部变量应在声明的同时对其进行初始化。\" class=\"headerlink\" title=\"在声明变量时，尽量使每个变量的声明单独占一行，即使是相同的数据类型也要将其放置在单独的一行上，这样有助于添加注释。对于局部变量应在声明的同时对其进行初始化。\"></a>在声明变量时，尽量使每个变量的声明单独占一行，即使是相同的数据类型也要将其放置在单独的一行上，这样有助于添加注释。对于局部变量应在声明的同时对其进行初始化。</h6><h6 id=\"Java代码中，关键字与关键字间如果有多个空格，这些空格均被视作一个。\"><a href=\"#Java代码中，关键字与关键字间如果有多个空格，这些空格均被视作一个。\" class=\"headerlink\" title=\"Java代码中，关键字与关键字间如果有多个空格，这些空格均被视作一个。\"></a>Java代码中，关键字与关键字间如果有多个空格，这些空格均被视作一个。</h6><h6 id=\"由于程序的开发与维护不能是同一个人，所以应尽量使用简单的技术完成程序需要的功能。\"><a href=\"#由于程序的开发与维护不能是同一个人，所以应尽量使用简单的技术完成程序需要的功能。\" class=\"headerlink\" title=\"由于程序的开发与维护不能是同一个人，所以应尽量使用简单的技术完成程序需要的功能。\"></a>由于程序的开发与维护不能是同一个人，所以应尽量使用简单的技术完成程序需要的功能。</h6><h6 id=\"关键的方法要多加注释，这样有助于阅读者了解代码结构\"><a href=\"#关键的方法要多加注释，这样有助于阅读者了解代码结构\" class=\"headerlink\" title=\"关键的方法要多加注释，这样有助于阅读者了解代码结构\"></a>关键的方法要多加注释，这样有助于阅读者了解代码结构</h6>","text":"通过阅读本篇，您可以： 了解Java主类结构 了解Java语言中的基本数据类型 理解Java语言中的常量与变量 掌握Java语言运算符的使用 理解Java语言数据类型的转换 了解Java语言中的代码注释与编码规范 Java主类结构Java语言是面向对象的程序设计语言，Java程序...","link":"","photos":[],"count_time":{"symbolsCount":"9.9k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"},{"name":"Eclipse","slug":"Eclipse","count":7,"path":"api/tags/Eclipse.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Java%E4%B8%BB%E7%B1%BB%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">Java主类结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8C%85%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">包声明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">类声明</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99%E4%B8%BB%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">编写主方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%BC%E5%85%A5API%E7%B1%BB%E5%BA%93\"><span class=\"toc-text\">导入API类库</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">基本数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B4%E6%95%B0%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">整数类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8D%81%E8%BF%9B%E5%88%B6%EF%BC%9A\"><span class=\"toc-text\">十进制：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%AB%E8%BF%9B%E5%88%B6%EF%BC%9A\"><span class=\"toc-text\">八进制：</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6\"><span class=\"toc-text\">十六进制</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%AE%E7%82%B9%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">浮点类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">字符类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#char%E5%9E%8B\"><span class=\"toc-text\">char型</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">转义字符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B8%83%E5%B0%94%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">布尔类型</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">变量与常量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%87%E8%AF%86%E7%AC%A6%E5%92%8C%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">标识符和关键字</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%87%E8%AF%86%E7%AC%A6\"><span class=\"toc-text\">标识符</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">关键字</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">声明变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A3%B0%E6%98%8E%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">声明常量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E7%9A%84%E6%9C%89%E6%95%88%E8%8C%83%E5%9B%B4\"><span class=\"toc-text\">变量的有效范围</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">成员变量</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">局部变量</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">运算符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">赋值运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">算术运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%A2%9E%E5%92%8C%E8%87%AA%E5%87%8F%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">自增和自减运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">比较运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">逻辑运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">位运算符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%80%9C%E6%8C%89%E4%BD%8D%E4%B8%8E%E2%80%9D%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">“按位与”运算</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%80%9C%E6%8C%89%E4%BD%8D%E6%88%96%E2%80%9D%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">“按位或”运算</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%80%9C%E6%8C%89%E4%BD%8D%E5%8F%96%E5%8F%8D%E2%80%9D%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">“按位取反”运算</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E2%80%9C%E6%8C%89%E4%BD%8D%E5%BC%82%E6%88%96%E2%80%9D%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">“按位异或”运算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-lt-lt-%EF%BC%9A%E5%B7%A6%E7%A7%BB\"><span class=\"toc-text\">1.&lt;&lt;：左移</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-gt-gt-%EF%BC%9A%E5%8F%B3%E7%A7%BB%E3%80%82\"><span class=\"toc-text\">2.&gt;&gt;：右移。</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">三元运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">运算符优先级</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">数据类型转换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">隐式类型转换</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%98%BE%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">显式类型转换</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E6%B3%A8%E9%87%8A%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">代码注释与编码规范</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">代码注释</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8D%95%E8%A1%8C%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">单行注释</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E8%A1%8C%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">多行注释</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">文档注释</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">编码规范</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E6%AF%8F%E6%9D%A1%E8%AF%AD%E5%8F%A5%E8%A6%81%E5%8D%95%E7%8B%AC%E5%8D%A0%E4%B8%80%E8%A1%8C%EF%BC%8C%E4%B8%80%E6%9D%A1%E5%91%BD%E4%BB%A4%E8%A6%81%E4%BB%A5%E5%88%86%E5%8F%B7%E7%BB%93%E6%9D%9F%E3%80%82\"><span class=\"toc-text\">每条语句要单独占一行，一条命令要以分号结束。</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F%E6%97%B6%EF%BC%8C%E5%B0%BD%E9%87%8F%E4%BD%BF%E6%AF%8F%E4%B8%AA%E5%8F%98%E9%87%8F%E7%9A%84%E5%A3%B0%E6%98%8E%E5%8D%95%E7%8B%AC%E5%8D%A0%E4%B8%80%E8%A1%8C%EF%BC%8C%E5%8D%B3%E4%BD%BF%E6%98%AF%E7%9B%B8%E5%90%8C%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%9F%E8%A6%81%E5%B0%86%E5%85%B6%E6%94%BE%E7%BD%AE%E5%9C%A8%E5%8D%95%E7%8B%AC%E7%9A%84%E4%B8%80%E8%A1%8C%E4%B8%8A%EF%BC%8C%E8%BF%99%E6%A0%B7%E6%9C%89%E5%8A%A9%E4%BA%8E%E6%B7%BB%E5%8A%A0%E6%B3%A8%E9%87%8A%E3%80%82%E5%AF%B9%E4%BA%8E%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%BA%94%E5%9C%A8%E5%A3%B0%E6%98%8E%E7%9A%84%E5%90%8C%E6%97%B6%E5%AF%B9%E5%85%B6%E8%BF%9B%E8%A1%8C%E5%88%9D%E5%A7%8B%E5%8C%96%E3%80%82\"><span class=\"toc-text\">在声明变量时，尽量使每个变量的声明单独占一行，即使是相同的数据类型也要将其放置在单独的一行上，这样有助于添加注释。对于局部变量应在声明的同时对其进行初始化。</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#Java%E4%BB%A3%E7%A0%81%E4%B8%AD%EF%BC%8C%E5%85%B3%E9%94%AE%E5%AD%97%E4%B8%8E%E5%85%B3%E9%94%AE%E5%AD%97%E9%97%B4%E5%A6%82%E6%9E%9C%E6%9C%89%E5%A4%9A%E4%B8%AA%E7%A9%BA%E6%A0%BC%EF%BC%8C%E8%BF%99%E4%BA%9B%E7%A9%BA%E6%A0%BC%E5%9D%87%E8%A2%AB%E8%A7%86%E4%BD%9C%E4%B8%80%E4%B8%AA%E3%80%82\"><span class=\"toc-text\">Java代码中，关键字与关键字间如果有多个空格，这些空格均被视作一个。</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E7%94%B1%E4%BA%8E%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%BC%80%E5%8F%91%E4%B8%8E%E7%BB%B4%E6%8A%A4%E4%B8%8D%E8%83%BD%E6%98%AF%E5%90%8C%E4%B8%80%E4%B8%AA%E4%BA%BA%EF%BC%8C%E6%89%80%E4%BB%A5%E5%BA%94%E5%B0%BD%E9%87%8F%E4%BD%BF%E7%94%A8%E7%AE%80%E5%8D%95%E7%9A%84%E6%8A%80%E6%9C%AF%E5%AE%8C%E6%88%90%E7%A8%8B%E5%BA%8F%E9%9C%80%E8%A6%81%E7%9A%84%E5%8A%9F%E8%83%BD%E3%80%82\"><span class=\"toc-text\">由于程序的开发与维护不能是同一个人，所以应尽量使用简单的技术完成程序需要的功能。</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%94%AE%E7%9A%84%E6%96%B9%E6%B3%95%E8%A6%81%E5%A4%9A%E5%8A%A0%E6%B3%A8%E9%87%8A%EF%BC%8C%E8%BF%99%E6%A0%B7%E6%9C%89%E5%8A%A9%E4%BA%8E%E9%98%85%E8%AF%BB%E8%80%85%E4%BA%86%E8%A7%A3%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">关键的方法要多加注释，这样有助于阅读者了解代码结构</span></a></li></ol></li></ol></li></ol></li></ol></li></ol>","author":{"name":"ACbug战队","slug":"blog-author","avatar":"https://img1.i-nmb.cn/ava.png","link":"/","description":"西北民族大学数学与计算机科学学院<br>系统与软件工作室网络安全组","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"流程控制—JAVA语言基础","uid":"df5c047b2c921ac68be6d4ab3ee5a04d","slug":"Process-control","date":"2022-04-23T15:04:09.000Z","updated":"2022-05-09T12:35:18.877Z","comments":true,"path":"api/articles/Process-control.json","keywords":null,"cover":[],"text":"通过阅读本章，您可以： 理解Java语言中复合语句的使用方法 掌握if条件语句的使用方法 了解if语句与switch语句的区别 掌握while循环语句的使用方法 掌握do…while循环语句的使用方法 了解while语句与do…while语句的区别 掌握for语句的使用方法 了解...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"},{"name":"Eclipse","slug":"Eclipse","count":7,"path":"api/tags/Eclipse.json"}],"author":{"name":"ACbug战队","slug":"blog-author","avatar":"https://img1.i-nmb.cn/ava.png","link":"/","description":"西北民族大学数学与计算机科学学院<br>系统与软件工作室网络安全组","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Hexo-NexT主题加速运行","uid":"ba921540c4d1816934a165cfaafbe5c3","slug":"acceleration","date":"2022-04-21T09:55:36.000Z","updated":"2022-04-28T13:58:44.754Z","comments":true,"path":"api/articles/acceleration.json","keywords":null,"cover":[],"text":"删繁就简去掉一些不必要的、花里胡哨的功能，这个可能要关掉pace、canvas_lines、tag-icon等，安心留田种地。 使用CDN加载部分css、js当我使用FancyBox进行图片放大的时候，每次在F12中看到FancyBox的加载速度十分缓慢，因为他都要调用托管地方的...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"hexo","slug":"hexo","count":5,"path":"api/tags/hexo.json"},{"name":"NexT","slug":"NexT","count":5,"path":"api/tags/NexT.json"}],"author":{"name":"ACbug战队","slug":"blog-author","avatar":"https://img1.i-nmb.cn/ava.png","link":"/","description":"西北民族大学数学与计算机科学学院<br>系统与软件工作室网络安全组","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}