{"title":"【实例2】24点游戏","uid":"f6e40bab8f6950a622e72a274ec12c0e","slug":"Point-24-Game","date":"2022-06-09T03:06:24.000Z","updated":"2022-06-19T13:58:10.802Z","comments":true,"path":"api/articles/Point-24-Game.json","keywords":null,"cover":[],"content":"<h2 id=\"描述问题\"><a href=\"#描述问题\" class=\"headerlink\" title=\"描述问题\"></a>描述问题</h2><p>在确认程序编写之前我们需要思考如何描述，表达问题</p>\n<p>算法具有五个特性</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1.输入：在算法中可以有零个或者多个输入</p>\n<p>2.输出：在算法中至少有一个或者多个输出</p>\n<p>3.有穷行：在执行有限的步骤之后，自动结束不会出现无限循环并且每一个步骤在可接受的时间内完成</p>\n<p>4.确定性：算法的每一个步骤都具有确定的含义，不会出现二义性</p>\n<p>5.可行性：算法的每一步都必须是可行的，也就是说，每一步都能够通过执行有限的次数完成</p></blockquote>\n<p>那么哪两个适用于描述问题呢？答案是<code>输入和输出</code></p>\n<p>描述问题，我们只需要抓住输入和输出就够了。至于什么其他的问题背景，对于毫无意义。找到问题的输入和输出之后，我们进入抽象化的世界，</p>\n<p>所以描述任何问题最关键的是要找到问题的输入和输出。</p>\n<p><strong>24点的输入是什么？四个整数，每个整数都在1~13之间</strong></p>\n<p><strong>输出呢？输出就是要找一个表达式，加减乘除算运算完成后等于24。如果找不到输出<code>无解</code>，找到就输出那个<code>表达式</code></strong></p>\n<p>有了输入和输出之后，24点问题就算是描述的非常清晰。</p>\n<p><strong>计算机专业描述问题，只需要抓住啊两个特点：输入和输出</strong></p>\n<p>不是说问题背景不需要，而是说，描述问题背景是为了找到输入与输出！与输入输出无关的背景可以酌情忽略。</p>\n<h2 id=\"解决问题方法\"><a href=\"#解决问题方法\" class=\"headerlink\" title=\"解决问题方法\"></a>解决问题方法</h2><p>输入和输出找到之后需要找解决方案，解决方案找到之后，把解决方案变成算法。把解决方案变成算法的过程可能需要咨询领域专家。算法知道后，我们的路就好走了。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>举例子：</p>\n<p>24点游戏我们需要输入四个数字，最后要找一个表达式，加减乘除算运算完成后等于24。</p>\n<p>比如说有3，7，9，10四个数</p>\n<p>我们计算的时候，找到两个数直接通过加减乘除通过双目运算符直接进行计算【Ps：我们需最终要把问题落实在基本操作上，而24点游戏的基本操作就是加减乘除】</p>\n<p>双目运算符直接进行计算，需要两个数，所以第一步，我们先要从四个数中抽出两个数进行加减乘除</p>\n<p>四个数里面取两个数，六种取法：</p>\n<p>3，7，9，10四个数</p>\n<p>取两个数：3,7 \t3,9 \t3,10\t 7,9\t 7,10\t 9,10</p>\n<p>我们单拿<code>3,7</code>来看，结果为<code>10,-4,4,21，(不能整除)</code></p>\n<p>由两个数可以算出4~5种可能：<code>10,9,10</code>；<code>-4,9,10</code> ； <code>4,9,10</code>；<code>21,9,10</code>，不能整除。</p>\n<p>四个变成三个数一共有24<del>30（6 * 4</del>6 * 5）种可能。【6为四个数抽出两个数的可能性】</p>\n<p>…………以此类推…………</p>\n<p>4个变为1个数，一共有1152~2250种变法【(C_4^2 * 4 * C_3^2* 4 * C_2^2 * 4&#x3D;1152】</p>\n<p>然后我们从这些数中寻找24，并且将其溯源，寻找他的运算符号以及从哪些数变化而来</p>\n<p>到此，我们的基本流程几乎了解，也就是说我们对于这个问题的策略基本上可以掌握</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>算法策略和算法是有区别的,它们是算法设计中的两个方面，算法策略是面向问题的,算法是面向实现的；但二者又是不可分的,首先是通过算法策略才找出解决问题的算法，其次对于用不同算法求解的问题算法策略是自然不同的。</p></blockquote>\n<h2 id=\"策略\"><a href=\"#策略\" class=\"headerlink\" title=\"策略\"></a>策略</h2><p>我们发现，这种流程颠覆了我们正常游戏的思维。它是用最基本的加减乘除操作，因为我们发现，不管4个数是如何变化，运算的时候都是抽取两个数进行计算。并且最多计算三轮，第一轮4个数变成3个数，第二轮3个数变成2个数，第三轮2个数变成1个数。</p>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><p>我们由上可以找到一个<strong>动态数据结构</strong>去配合实现，我们发现，在上述流程中，四个数转三个数，将会生成多个数（4~5种可能），然后在每一种可能中又包含多种可能，这种<strong>连续一对多</strong>的情况下，我们不由的想到一种数据结构——<strong>树</strong></p>\n<p>从<code>策略</code>可知，我们计算了三轮，所以很容易判断树的高度为4，并且这个高度为4的树的叶子结点最多为2250个、最少有1152个。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>分析问题的过程中可能有一系列的回答或者决策。</p>\n<p>所以这个数习惯上把它叫做分析树，也有时候把它叫做决策树</p>\n<p>他实际上和计算机与人类在做围棋博弈的时候的那个思维方法是一样的，所以他也叫博弈树</p>\n<p><strong>（分析树是动态的）</strong></p></blockquote>\n<p>所以此类问题我们可以使用树来进行存储记录</p>\n<h2 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h2><p>每个叶子结点都拥有一个int型的数据，而这些数据需要用一个int型容器进行存放，而最方便的int型容器是<code>vector</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">struct element&#123;\n\tint number;\n\tstd::string trace;&#x2F;&#x2F;string即为字符串\n&#125;;\n\n\nstruct NODE&#123;\n\tstd::vector&lt;element&gt; data;\n\tstd::vector&lt;NODE&gt; children;&#x2F;&#x2F;子节点 \n&#125; ana_tree;\n&#x2F;&#x2F;定义分析（analyse）树；ADT抽象数据类型 vector&lt;NODE&gt;（类似于递归结构） </code></pre>\n\n<p>对于分析树的根节点来说，里面拥有四个整数；而对于叶子结点来说，每个结点只有一个整数。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>抽象数据类型（Abstract Data Type，ADT）是将数据对象、数据对象之间的关系和数据对象的基本操作封装在一起的一种表达方式，它和工程中的应用是一致的。</p>\n<p>在工程项目中，开始编程之前，首先列出程序需要完成的功能任务，先不用管具体怎么实现，实现细节在项目后期完成，一开始只是抽象出有哪些基本操作。把这些操作项封装为抽象数据类型，等待后面具体实现这些操作。而其他对象如果想调用这些操作，只需要按照规定好的参数接口调用，并不需要知道具体是怎么实现的，从而实现了数据封装和信息隐藏。</p>\n<p>在 C++ 中可以用类的声明表示抽象数据类型，用类的实现来实现抽象数据类型的具体操作。</p>\n<p><img src=\"https://img1.i-nmb.cn/img/1-20040912553LU.gif\" alt=\"ADT三元素示意图\"></p>\n<p>抽象数据类型可以用以下的三元组来表示：</p>\n<p>ADT抽象数据类型名{<br>  数据对象：&lt;数据对象的定义&gt;<br>  数据关系：&lt;数据关系的定义&gt;<br>  基本操作：&lt;基本操作的定义&gt;<br>} ADT抽象数据类型名、</p>\n<p>引用于：<a href=\"http://c.biancheng.net/view/7526.html\">抽象数据类型（ADT）是什么？ (biancheng.net)</a></p></blockquote>\n<p>定义好树之后，我们开始在main函数中初始化，先给ana_tree中存放两个值</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int main()&#123;\n\tana_tree.data &#x3D; &#123;3,6&#125;;\n\tstep(ana_tree);\n\tfor(auto child:ana_tree.children)&#123;\n\t\tfor(auto num:child.data)&#123;\n\t\t\tprintf(&quot;%d&quot;,num);\n\t\t&#125;\n\t&#125;\n\treturn 0;\n&#125;</code></pre>\n\n\n\n<h3 id=\"step\"><a href=\"#step\" class=\"headerlink\" title=\"step\"></a>step</h3><p>其中step中的需要的操作为：n个数中取出两个，然后这两个和剩下的哪些没有取出的数变成4~5个子节点。</p>\n<h4 id=\"n个数中取出两个数\"><a href=\"#n个数中取出两个数\" class=\"headerlink\" title=\"n个数中取出两个数\"></a>n个数中取出两个数</h4><p>实现代码如下</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">void step(NODE&amp; tree)&#123;\n\tfor(auto i&#x3D;tree.data.begin();i!&#x3D;tree.data.end();++i)&#123;\n\t\tfor(auto j&#x3D;i+1;j!&#x3D;tree.data.end();++j)\n\t&#125;\n&#125;&#x2F;&#x2F;类似于冒泡排序循环</code></pre>\n\n<h4 id=\"n个数转换为n-1\"><a href=\"#n个数转换为n-1\" class=\"headerlink\" title=\"n个数转换为n-1\"></a>n个数转换为n-1</h4><p>在前文介绍中，我们推断2个数合成1个数一共有4~5种可能，那么我们设定每个非叶子节点有5个子节点（如下代码中<code>t1,t2,t3,t4,t5;</code>）并且使用<code>.data.push_back</code>将加减乘除的得数赋予<code>t1,t2,t3,t4,t5;</code>，其次使用<code>tree.children.push_back</code>将<code>t1,t2,t3,t4,t5;</code>作为孩子结点，其中，在进行除法（<code>t5</code>）时需要进行<strong>判断除数是否为0以及是否能够整除</strong></p>\n<pre class=\"line-numbers language-C++\" data-language=\"C++\"><code class=\"language-C++\">void step(NODE&amp; tree)&#123;\n\tfor(auto i&#x3D;tree.data.begin();i!&#x3D;tree.data.end();++i)&#123;\n\t\tfor(auto j&#x3D;i+1;j!&#x3D;tree.data.end();++j)&#123;\n\t\t\tNODE t1,t2,t3,t4,t5;&#x2F;&#x2F;孩子结点 \n\t\t\tint x&#x3D;*i,y&#x3D;*j;\n\t\t\tt1.data.push_back(x+y); \n\t\t\tt2.data.push_back(x-y); \n\t\t\tt3.data.push_back(y-x); \n\t\t\tt4.data.push_back(x*y); \n\t\t\ttree.children.push_back(t1);\n\t\t\ttree.children.push_back(t2);\n\t\t\ttree.children.push_back(t3);\n\t\t\ttree.children.push_back(t4);\n\t\t\t\n\t\t\t\n\t\t\tif(x&amp;&amp;y&#x2F;*排除0*&#x2F;)\n\t\t\t\tif(x%y&#x3D;&#x3D;0)&#123;\n\t\t\t\t\tt5.data.push_back(x&#x2F;y); \n\t\t\t\t\ttree.children.push_back(t5);\n\t\t\t\t&#125;\n\t\t\t\t\t\n\t\t\t\telse if(y%x&#x3D;&#x3D;0)&#123;\n\t\t\t\t\tt5.data.push_back(y&#x2F;x); \n\t\t\t\t\ttree.children.push_back(t5);\n\t\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n&#125;</code></pre>\n\n\n\n<p>此时我们的<code>main</code>函数中只在根节点中存放了两个数，为了验证step函数是否正确，我们需要一个输出</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int main()&#123;\n\tana_tree.data &#x3D; &#123;3,7&#125;;\n\tstep(ana_tree);\n\tfor(auto child:ana_tree.children)&#123;\n\t\tfor(auto num:child.data)&#123;\n\t\t\tprintf(&quot;%d\\t&quot;,num);\n\t\t&#125;\n\t\tprintf(&quot;\\n&quot;);\n\t&#125;\n\treturn 0;\n&#125; </code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>child就是每个子节点，num是子节点中所有的数；然后把每个子节点的数进行输出</p></blockquote>\n<h4 id=\"将n-2个数加入到子节点\"><a href=\"#将n-2个数加入到子节点\" class=\"headerlink\" title=\"将n-2个数加入到子节点\"></a>将n-2个数加入到子节点</h4><p>此时我们的程序可以计算2个数，但是我们还剩下了n-2（设最初有n个数）个数还没有放入子节点，此时这个n是个变量（我们在编写程序的时候没有确定n的个数），所以我们需要加入一个<code>for(auto k=tree.data.begin();k!=tree.data.end();++k)</code>循环，其中<code>if(k==i||k==j) continue;</code>去除i,j,将剩下的存入t1-t5；</p>\n<p>将x记为i的数值，y记为j的数值<code>int x=i-&gt;number,y=j-&gt;number;</code></p>\n<p>然后在t1~t5中储入格式为<code>&#123;x+y,make_trace(i,&quot;+&quot;,j)&#125;</code>来记录加减乘除的符号方便溯源</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">void step(NODE&amp; tree)&#123;\n\tfor(auto i&#x3D;tree.data.begin();i!&#x3D;tree.data.end();++i)&#123;\n\t\tfor(auto j&#x3D;i+1;j!&#x3D;tree.data.end();++j)&#123;\n\t\t\tNODE t1,t2,t3,t4,t5;&#x2F;&#x2F;孩子结点 \n\t\t\tfor(auto k&#x3D;tree.data.begin();k!&#x3D;tree.data.end();++k)&#123;\n\t\t\t\tif(k&#x3D;&#x3D;i||k&#x3D;&#x3D;j) continue;\n\t\t\t\tt1.data.push_back(*k); \n\t\t\t\tt2.data.push_back(*k); \n\t\t\t\tt3.data.push_back(*k); \n\t\t\t\tt4.data.push_back(*k);\n\t\t\t\tt5.data.push_back(*k);\n\t\t\t&#125;\n            \n\t\t\tint x&#x3D;i-&gt;number,y&#x3D;j-&gt;number;\n\t\t\tt1.data.push_back(&#123;x+y,make_trace(i,&quot;+&quot;,j)&#125;); \n\t\t\tt2.data.push_back(&#123;x-y,make_trace(i,&quot;-&quot;,j)&#125;); \n\t\t\tt3.data.push_back(&#123;y-x,make_trace(j,&quot;-&quot;,i)&#125;); \n\t\t\tt4.data.push_back(&#123;x*y,make_trace(i,&quot;*&quot;,j)&#125;); \t\t\t\n\t\t\t\n\t\t\ttree.children.push_back(t1);\n\t\t\ttree.children.push_back(t2);\n\t\t\ttree.children.push_back(t3);\n\t\t\ttree.children.push_back(t4);\n\t\t\t\n\t\t\tif(x&amp;&amp;y&#x2F;*排除0*&#x2F;)\n\t\t\t\tif(x%y&#x3D;&#x3D;0)&#123;\n\t\t\t\t\tt5.data.push_back(&#123;x&#x2F;y,make_trace(i,&quot;&#x2F;&quot;,j)&#125;); \n\t\t\t\t\ttree.children.push_back(t5);\n\t\t\t\t&#125;\n\t\t\t\t\t\n\t\t\t\telse if(y%x&#x3D;&#x3D;0)&#123;\n\t\t\t\t\tt5.data.push_back(&#123;y&#x2F;x,make_trace(j,&quot;&#x2F;&quot;,i)&#125;); \n\t\t\t\t\ttree.children.push_back(t5);\n\t\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n&#125;</code></pre>\n\n\n\n<p>在<code>main</code>函数中</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int main()&#123;\n\tprintf(&quot;请输入四个数：&quot;); \n\tfor(int i &#x3D; 0;i&lt;4;++i)&#123;\n\t\tint n;\n\t\tscanf(&quot;%d&quot;,&amp;n);\n\t\tana_tree.data.push_back(&#123;n,std::to_string(n)&#125;);\n\t&#125;\n\t\n\tstep(ana_tree);\n\tfor(NODE&amp; child2: ana_tree.children)&#123;\n\t\tstep(child2);\n\t&#125;\n\tfor(NODE&amp; child2: ana_tree.children)&#123;\n\t\tfor(NODE&amp; child3: child2.children)&#123;\n\t\t\tstep(child3);\n\t\t&#125;\n\t&#125;\n\t\n\t\n\t\n\tint count&#x3D;0,j&#x3D;0;\n\tfor(auto child2:ana_tree.children)&#123;\n\t\tfor(auto child3:child2.children)&#123;\n\t\t\tfor(auto child4:child3.children)&#123;\n\t\t\t\tif(child4.data.begin()-&gt;number!&#x3D;24) continue;\n\t\t\t\tprintf(&quot;第%d组解法：%s\\n&quot;,++count,child4.data.begin()-&gt;trace.c_str());\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\t\tif(count&#x3D;&#x3D;0)&#123;\n\t\t\tprintf(&quot;无解\\n&quot;); \n\t\t&#125;\n\t\t\n\treturn 0;\n&#125; </code></pre>\n\n\n\n\n\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include&lt;stdio.h&gt;\n#include&lt;vector&gt;\n#include&lt;string&gt;\n\nstruct element&#123;\n\tint number;\n\tstd::string trace;\n&#125;;\n\n\nstruct NODE&#123;\n\tstd::vector&lt;element&gt; data;\n\tstd::vector&lt;NODE&gt; children;\n&#125; ana_tree;\n\nstd::string make_trace(\tstd::vector&lt;element&gt;::iterator i,std::string op,std::vector&lt;element&gt;::iterator j)&#123;\n\t\n\treturn &quot;(&quot;+i-&gt;trace+&quot;+&quot;+j-&gt;trace+&quot;)&quot;;\n&#125;\n\nvoid step(NODE&amp; tree)&#123;\n\tfor(auto i&#x3D;tree.data.begin();i!&#x3D;tree.data.end();++i)&#123;\n\t\tfor(auto j&#x3D;i+1;j!&#x3D;tree.data.end();++j)&#123;\n\t\t\tNODE t1,t2,t3,t4,t5;\n\t\t\tfor(auto k&#x3D;tree.data.begin();k!&#x3D;tree.data.end();++k)&#123;\n\t\t\t\tif(k&#x3D;&#x3D;i||k&#x3D;&#x3D;j) continue;\n\t\t\t\tt1.data.push_back(*k); \n\t\t\t\tt2.data.push_back(*k); \n\t\t\t\tt3.data.push_back(*k); \n\t\t\t\tt4.data.push_back(*k);\n\t\t\t\tt5.data.push_back(*k);\n\t\t\t\t\n\t\t\t&#125;\n\t\t\tint x&#x3D;i-&gt;number,y&#x3D;j-&gt;number;\n\t\t\tt1.data.push_back(&#123;x+y,make_trace(i,&quot;+&quot;,j)&#125;); \n\t\t\tt2.data.push_back(&#123;x-y,make_trace(i,&quot;-&quot;,j)&#125;); \n\t\t\tt3.data.push_back(&#123;y-x,make_trace(j,&quot;-&quot;,i)&#125;); \n\t\t\tt4.data.push_back(&#123;x*y,make_trace(i,&quot;*&quot;,j)&#125;); \t\t\t\n\t\t\t\n\n\t\t\ttree.children.push_back(t1);\n\t\t\ttree.children.push_back(t2);\n\t\t\ttree.children.push_back(t3);\n\t\t\ttree.children.push_back(t4);\n\t\t\t\n\t\t\t\n\t\t\tif(x&amp;&amp;y&#x2F;*排除0*&#x2F;)\n\t\t\t\tif(x%y&#x3D;&#x3D;0)&#123;\n\t\t\t\t\tt5.data.push_back(&#123;x&#x2F;y,make_trace(i,&quot;&#x2F;&quot;,j)&#125;); \n\t\t\t\t\ttree.children.push_back(t5);\n\t\t\t\t&#125;\n\t\t\t\t\t\n\t\t\t\telse if(y%x&#x3D;&#x3D;0)&#123;\n\t\t\t\t\tt5.data.push_back(&#123;y&#x2F;x,make_trace(j,&quot;&#x2F;&quot;,i)&#125;); \n\t\t\t\t\ttree.children.push_back(t5);\n\t\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n&#125;\n\nint main()&#123;\n\tprintf(&quot;请输入四个数：&quot;); \n\tfor(int i &#x3D; 0;i&lt;4;++i)&#123;\n\t\tint n;\n\t\tscanf(&quot;%d&quot;,&amp;n);\n\t\tana_tree.data.push_back(&#123;n,std::to_string(n)&#125;);\n\t&#125;\n\t\n\tstep(ana_tree);\n\tfor(NODE&amp; child2: ana_tree.children)&#123;\n\t\tstep(child2);\n\t&#125;\n\tfor(NODE&amp; child2: ana_tree.children)&#123;\n\t\tfor(NODE&amp; child3: child2.children)&#123;\n\t\t\tstep(child3);\n\t\t&#125;\n\t&#125;\n\t\n\t\n\t\n\tint count&#x3D;0,j&#x3D;0;\n\tfor(auto child2:ana_tree.children)&#123;\n\t\tfor(auto child3:child2.children)&#123;\n\t\t\tfor(auto child4:child3.children)&#123;\n\t\t\t\tif(child4.data.begin()-&gt;number!&#x3D;24) continue;\n\t\t\t\tprintf(&quot;第%d组解法：%s\\n&quot;,++count,child4.data.begin()-&gt;trace.c_str());\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n\t\tif(count&#x3D;&#x3D;0)&#123;\n\t\t\tprintf(&quot;无解\\n&quot;); \n\t\t&#125;\n\t\t\n\treturn 0;\n&#125; </code></pre>\n\n","feature":true,"text":"描述问题在确认程序编写之前我们需要思考如何描述，表达问题 算法具有五个特性 1.输入：在算法中可以有零个或者多个输入 2.输出：在算法中至少有一个或者多个输出 3.有穷行：在执行有限的步骤之后，自动结束不会出现无限循环并且每一个步骤在可接受的时间内完成 4.确定性：算法的每一个步...","link":"","photos":[],"count_time":{"symbolsCount":"9.4k","symbolsTime":"9 mins."},"categories":[],"tags":[{"name":"24点","slug":"24点","count":1,"path":"api/tags/24点.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8F%8F%E8%BF%B0%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">描述问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">解决问题方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">解决方案</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">策略</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">算法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#step\"><span class=\"toc-text\">step</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#n%E4%B8%AA%E6%95%B0%E4%B8%AD%E5%8F%96%E5%87%BA%E4%B8%A4%E4%B8%AA%E6%95%B0\"><span class=\"toc-text\">n个数中取出两个数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#n%E4%B8%AA%E6%95%B0%E8%BD%AC%E6%8D%A2%E4%B8%BAn-1\"><span class=\"toc-text\">n个数转换为n-1</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B0%86n-2%E4%B8%AA%E6%95%B0%E5%8A%A0%E5%85%A5%E5%88%B0%E5%AD%90%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">将n-2个数加入到子节点</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">完整代码</span></a></li></ol>","author":{"name":"ACbug战队","slug":"blog-author","avatar":"https://img1.i-nmb.cn/ava.png","link":"/","description":"西北民族大学数学与计算机科学学院<br>系统与软件工作室网络安全组","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"rand随机函数——MATLAB函数","uid":"9d7035fca2dd78eacb18cb9d3466fa8f","slug":"MATLAB-rand","date":"2022-08-30T11:57:49.000Z","updated":"2022-08-30T15:04:13.387Z","comments":true,"path":"api/articles/MATLAB-rand.json","keywords":null,"cover":[],"text":"我们有一串代码 E &#x3D; zeros(10,5,3) ; E(:,:,1) &#x3D; rand(10,5); E(:,:,2) &#x3D; randi(99,10,5); E(:,:,3) &#x3D; randn(10,5); 那么这串代码的具体含义是什么呢？ 1...","link":"","photos":[],"count_time":{"symbolsCount":865,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"MATLAB","slug":"MATLAB","count":1,"path":"api/tags/MATLAB.json"},{"name":"数学建模","slug":"数学建模","count":1,"path":"api/tags/数学建模.json"}],"author":{"name":"ACbug战队","slug":"blog-author","avatar":"https://img1.i-nmb.cn/ava.png","link":"/","description":"西北民族大学数学与计算机科学学院<br>系统与软件工作室网络安全组","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"【实例1の更新2】表达式求值——加入括号运算","uid":"fe68a41eeb4610b86a3bfb5b3b4407ee","slug":"example-optimization-2","date":"2022-05-24T11:20:52.000Z","updated":"2022-06-19T13:58:03.129Z","comments":true,"path":"api/articles/example-optimization-2.json","keywords":null,"cover":[],"text":"前段时间我们制作了一个表达式求值的程序， 我们赋予他基本框架与功能：【实例】表达式求值——利用stack实现五种运算符的运算 | 《课程设计》笔记 (i-nmb.cn) 以及更新了一目运算符的支持：【实例更新】表达式求值——加入新的单目运算符 | 《课程设计》笔记 (i-nmb....","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"运算符","slug":"运算符","count":3,"path":"api/tags/运算符.json"}],"author":{"name":"ACbug战队","slug":"blog-author","avatar":"https://img1.i-nmb.cn/ava.png","link":"/","description":"西北民族大学数学与计算机科学学院<br>系统与软件工作室网络安全组","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}