{"title":"Java 数组—JAVA语言基础","uid":"4f0f7aced0ab37b53159f295f5420300","slug":"array","date":"2022-04-24T02:45:43.000Z","updated":"2022-05-09T12:36:08.941Z","comments":true,"path":"api/articles/array.json","keywords":null,"cover":[],"content":"<p>通过阅读本篇，您可以：</p>\n<p>掌握一维数组的创建和使用方法</p>\n<p>掌握二维数组的创建和使用方法</p>\n<p>了解如何遍历数组</p>\n<p>了解如何填充替换数组中的元素</p>\n<p>了解如何对数组进行排序</p>\n<p>了解如何复制数组</p>\n<p>了解查询数组的方法</p>\n<h2 id=\"数组概述\"><a href=\"#数组概述\" class=\"headerlink\" title=\"数组概述\"></a>数组概述</h2><p>数组是具有相同数据类型的一组数据的集合。数组中的每个元素具有相同的数据类型。</p>\n<p>在Java中同样将数组看作一个对象，虽然基本数据类型不是对象，但由基本数据类型组成的数组却是对象。</p>\n<h2 id=\"一维数组的创建及使用\"><a href=\"#一维数组的创建及使用\" class=\"headerlink\" title=\"一维数组的创建及使用\"></a>一维数组的创建及使用</h2><p>一维数组实质上是一组相同类型数据的线性集合，当在程序中需要处理一组数据，或者传递一组数据时，可以应用这种类型的数组。</p>\n<h3 id=\"创建一维数组\"><a href=\"#创建一维数组\" class=\"headerlink\" title=\"创建一维数组\"></a>创建一维数组</h3><p>数组作为对象允许使用new关键字进行内存分配。在使用数组之前，必须首先定义数组变量所属的类型。一维数组的创建有两种形式。</p>\n<h4 id=\"先声明，再用new运算符进行内存分配\"><a href=\"#先声明，再用new运算符进行内存分配\" class=\"headerlink\" title=\"先声明，再用new运算符进行内存分配\"></a>先声明，再用<strong>new</strong>运算符进行内存分配</h4><p>声明一维数组有下列两种方式：</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424105130326.png\" alt=\"声明一维数组\"></p>\n<p>数组元素类型决定了数组的数据类型。</p>\n<p>它可以是Java中任意的数据类型，包括简单类型和组合类型。数组名字为一个合法的标识符，符号“[ ]”指明该变量是一个数组类型变量。单个“[ ]”表示要创建的数组是一个一维数组。</p>\n<p>声明一维数组，实例代码</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424105241086.png\" alt=\"声明一维数组，实例代码\"></p>\n<p>声明数组后，还不能立即访问它的任何元素，因为声明数组只是给出了数组名字和元素的数据类型</p>\n<p>要想真正使用数组，还要为它分配内存空间。在为数组分配内存空间时必须指明数组的长度。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">数组名字 &#x3D; new 数组元素的类型[数组元素的个数];</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">arr &#x3D; new int[5];</code></pre>\n\n<h4 id=\"声明的同时为数组分配内存\"><a href=\"#声明的同时为数组分配内存\" class=\"headerlink\" title=\"声明的同时为数组分配内存\"></a>声明的同时为数组分配内存</h4><p>这种创建数组的方法是将数组的声明和内存的分配合在一起执行。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>数组元素的类型 数组名 &#x3D; new数组元素的类型[数组元素的个数];</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int month[ ] &#x3D; new int[12]</code></pre>\n\n<p>上面的代码创建数组month，并指定了数组长度为12。这种创建数组的方法也是Java程序编写过程中普遍的做法。</p>\n<h3 id=\"初始化一维数组\"><a href=\"#初始化一维数组\" class=\"headerlink\" title=\"初始化一维数组\"></a>初始化一维数组</h3><p>数组与基本数据类型一样可以进行初始化操作。</p>\n<p>数组的初始化可分别初始化数组中的每个元素。</p>\n<p>数组的初始化有以下两种形式：</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424105806481.png\" alt=\"数组的初始化\"></p>\n<p>从中可以看出，数组的初始化就是包括在大括号之内用逗号分开的表达式列表。</p>\n<h3 id=\"使用一维数组\"><a href=\"#使用一维数组\" class=\"headerlink\" title=\"使用一维数组\"></a>使用一维数组</h3><p>在Java集合中一维数组是常见的一种数据结构。下面的实例是使用一维数组将1～12月各月的天数输出。</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424105929192.png\" alt=\"在项目中创建类GetDay，在主方法中创建int型数组，并实现将各月的天数输出。\"></p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424105945335.png\" alt=\"结果\"></p>\n<h2 id=\"二维数组的创建及使用\"><a href=\"#二维数组的创建及使用\" class=\"headerlink\" title=\"二维数组的创建及使用\"></a>二维数组的创建及使用</h2><p>如果一维数组中的各个元素仍然是一个数组，那么它就是一个二维数组。</p>\n<h3 id=\"二维数组的创建\"><a href=\"#二维数组的创建\" class=\"headerlink\" title=\"二维数组的创建\"></a>二维数组的创建</h3><p>二维数组可以看作是特殊的一维数组，因此，二维数组的创建同样有两种方式。</p>\n<h4 id=\"先声明，再用new运算符进行内存分配-1\"><a href=\"#先声明，再用new运算符进行内存分配-1\" class=\"headerlink\" title=\"先声明，再用new运算符进行内存分配\"></a>先声明，再用new运算符进行内存分配</h4><p>声明二维数组的语法如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">数组元素的类型 数组名字[ ][ ];\n\n数组元素的类型[ ][ ] 数组名字;</code></pre>\n\n<p>例如：<code>int myarr[][];</code></p>\n<p>同一维数组一样，二维数组在声明时也没有分配内存空间，同样要使用new关键字来分配内存，然后才可以访问每个元素。</p>\n<p>对于高维数组，有两种为数组分配内存的方式：</p>\n<h5 id=\"（1）-直接为每一维分配内存空间\"><a href=\"#（1）-直接为每一维分配内存空间\" class=\"headerlink\" title=\"（1） 直接为每一维分配内存空间\"></a>（1） 直接为每一维分配内存空间</h5><p>为每一维数组分配内存，实例代码如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">a &#x3D; new int[2][4]</code></pre>\n\n<p>上述代码创建了二维数组a，二维数组a中包括两个长度为4的一维数组</p>\n<h5 id=\"（2）-分别为每一维分配内存\"><a href=\"#（2）-分别为每一维分配内存\" class=\"headerlink\" title=\"（2） 分别为每一维分配内存\"></a>（2） 分别为每一维分配内存</h5><p>分别为每一维分配内存，实例代码如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">a &#x3D; new int[2][];\n\na[0] &#x3D; new int[2];\n\na[1] &#x3D; new int[3];</code></pre>\n\n<h4 id=\"声明的同时为数组分配内存-1\"><a href=\"#声明的同时为数组分配内存-1\" class=\"headerlink\" title=\"声明的同时为数组分配内存\"></a>声明的同时为数组分配内存</h4><p>第二种方式同第一种实现的功能相同。使用这种方式为二维数组分配内存时，首先指定最左边维数的内存，然后单独地给余下的维数分配内存。</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424110642079.png\" alt=\"通过第二种方式为二维数组分配内存，如图\"></p>\n<h3 id=\"二维数组初始化\"><a href=\"#二维数组初始化\" class=\"headerlink\" title=\"二维数组初始化\"></a>二维数组初始化</h3><p>二维数组的初始化与一维数组初始化类似，同样可以使用大括号完成。</p>\n<p>语法如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">type arrayname[][] &#x3D; &#123;value1,value2…valuen&#125;;</code></pre>\n\n<p>type：数组数据类型。</p>\n<p>arrayname：数组名称，一个合法的标识符。</p>\n<p>value：数组中各元素的值。</p>\n<p>初始化二维数组，实例代码如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int myarr[][] &#x3D; &#123;&#123;12,0&#125;,&#123;45,10&#125;&#125;;</code></pre>\n\n<p>初始化二维数组后，要明确数组的下标都是从0开始。例如，上面的代码中myarr[1] [1]的值为10。</p>\n<p>int型二维数组是以int a [][]来定义的，所以可以直接给a[x] [y]赋值。例如，给a[1]的第2个元素赋值的语句如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">a[1][1] &#x3D; 20</code></pre>\n\n<h3 id=\"使用二维数组\"><a href=\"#使用二维数组\" class=\"headerlink\" title=\"使用二维数组\"></a>使用二维数组</h3><p>二维数组在实际应用中用得非常广泛。</p>\n<p>下面的实例就是使用二维数组输出一个3行4列且所有元素都是0的矩阵。</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424111059355.png\" alt=\"在项目中创建类Matrix，在主方法中编写代码实现输出一个3行4列且所有元素都为0的矩阵。\"></p>\n<p>运行结果如图</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424111117262.png\" alt=\"运行结果\"></p>\n<h2 id=\"数组的基本操作\"><a href=\"#数组的基本操作\" class=\"headerlink\" title=\"数组的基本操作\"></a>数组的基本操作</h2><p>java.util包的Arrays类包含了用来操作数组（如排序和搜索）的各种方法，本节就将介绍数组的基本操作。</p>\n<h3 id=\"遍历数组\"><a href=\"#遍历数组\" class=\"headerlink\" title=\"遍历数组\"></a>遍历数组</h3><p>遍历数组就是获取数组中的每个元素。通常遍历数组都是使用for循环来实现。遍历一维数组很简单，也很好理解，下面详细介绍遍历二维数组的方法。</p>\n<p>遍历二维数组需使用双层for循环，通过数组的length属性可获得数组的长度。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Trap&#123;\n    public static void main(String[] args)&#123;\n        int b[][] &#x3D; new int[][]&#123;&#123;1&#125;,&#123;2,3&#125;,&#123;4,5,6&#125;&#125;;\n        for(int k&#x3D;0;k&lt;b.length;k++)&#123;\n            for(int c&#x3D;0;c&lt;b[k].length;c++)&#123;\n                System.out.println(b[k][c]);\n            &#125;\n            System.out.println();\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>运行结果如图</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424111809622.png\" alt=\"运行结果\"></p>\n<p>在遍历数组时，使用foreach语句可能会更简单。下面的实例就是通过foreach语句遍历二维数组。</p>\n<p>在项目中创建类Tautog，在主方法中定义二维数组，使用foreach语句遍历二维数组代码如下:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Tautog&#123;\t\t\t\t\t\t\t\t\n    public static void main(String[] args)&#123;\n        int arr2[][] &#x3D; &#123;&#123;4,3&#125;,&#123;1,2&#125;&#125;;\n        System.out.println(&quot;数组中的元素是：&quot;);\n        int i &#x3D; 0;\n        for(int x[]:arr2)&#123;\t\t&#x2F;&#x2F;外层循环变量为一维数组\n            i++;\t\t\t\t&#x2F;&#x2F;外层计数器递增\n            int j &#x3D; 0;\n            for(int e:x)&#123;\t\t&#x2F;&#x2F;循环遍历每一个数组元素\n                j++;\t\t\t&#x2F;&#x2F;内层计数器递增\n                if(i &#x3D;&#x3D; arr2.length &amp;&amp; j &#x3D;&#x3D; x.length)&#123;\t\t&#x2F;&#x2F;判断变量是二维数组的最后一个元素\n                    System.out.print(e);\t\t\t\t\t&#x2F;&#x2F;输出二维数组最后一个元素\n                &#125;else\n                    System.out.print(e + &quot;、&quot;)\t\t\t\t&#x2F;&#x2F;如果不是最后个元素则输出e、\n            &#125;\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>运行结果：</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424113100051.png\" alt=\"运行结果\"></p>\n<h3 id=\"填充替换数组元素\"><a href=\"#填充替换数组元素\" class=\"headerlink\" title=\"填充替换数组元素\"></a>填充替换数组元素</h3><p>数组中的元素定义完成后，可通过Arrays类的静态方法fill()来对数组中的元素进行替换。</p>\n<p>该方法通过各种重载形式可完成对任意类型的数组元素的替换。fill()方法有两种参数类型，下面以int型数组为例介绍fill()方法的使用方法。</p>\n<h4 id=\"（1）-fill-int-a-int-value\"><a href=\"#（1）-fill-int-a-int-value\" class=\"headerlink\" title=\"（1） fill(int[] a,int value)\"></a>（1） fill(int[] a,int value)</h4><p>该方法可将指定的int值分配给int型数组的每个元素。</p>\n<p>语法如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">fill(int[] a,int value)</code></pre>\n\n<p>a：要进行元素替换的数组。</p>\n<p>value：要存储数组中所有元素的值。</p>\n<p>在项目中创建类Swap，在主方法中创建一维数组，并实现通过fill()方法填充数组元素，最后将数组中的各个元素输出。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Arrays;\npublic class Swap&#123;\n    public static void main(String[] atgs)&#123;\n        int arr[] &#x3D; new int[5];\t\t\t\t&#x2F;&#x2F;新建int型数组\n        Arrays.fill(arr,8);\t\t\t\t\t&#x2F;&#x2F;使用同一个值对数组进行填充\n        for(int i &#x3D; 0;i &lt; arr.length;i++)&#123;\t&#x2F;&#x2F;循环遍历数组中的元素\n            &#x2F;&#x2F;将数组中的元素依次输出\n            System.out.println(&quot;第&quot; + i + &quot;个元素是：&quot; + arr[i]);\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424114555718.png\" alt=\"运行结果\"></p>\n<h4 id=\"（2）-fill-int-a-int-fromIndex-int-toIndex-int-value\"><a href=\"#（2）-fill-int-a-int-fromIndex-int-toIndex-int-value\" class=\"headerlink\" title=\"（2） fill(int[] a,int fromIndex,int toIndex,int value)\"></a>（2） fill(int[] a,int fromIndex,int toIndex,int value)</h4><p>该方法将指定的int值分配给int型数组指定范围中的每个元素。填充的范围从索引fromIndex（包括）一直到索引toIndex（不包括）。如果fromIndex &#x3D;&#x3D; toIndex，则填充范围为空。</p>\n<p>语法如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">fill(int[] a,int fromIndex,int toIndex,int value)</code></pre>\n\n<p>a：要进行填充的数组。</p>\n<p>fromIndex：要使用指定值填充的第一个元素的索引（包括）。</p>\n<p>toIndex：要使用指定值填充的最后一个元素的索引（不包括）。</p>\n<p>value：要存储在数组所有元素中的值。</p>\n<p>下实例我们通过 Java Util 类的 Arrays.fill(arrayname,value) 方法和Arrays.fill(arrayname ,starting index ,ending index ,value) 方法向数组中填充元素：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.*;\npublic class FillTest &#123;\n    public static void main(String args[]) &#123;\n        int array[] &#x3D; new int[6];\n        Arrays.fill(array, 100);\n        for (int i&#x3D;0, n&#x3D;array.length; i &lt; n; i++) &#123;\n            System.out.println(array[i]);\n        &#125;\n        System.out.println();\n        Arrays.fill(array, 3, 6, 50);\n        for (int i&#x3D;0, n&#x3D;array.length; i&lt; n; i++) &#123;\n            System.out.println(array[i]);\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>以上代码运行输出结果为：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">100\n100\n100\n100\n100\n100\n\n100\n100\n100\n50\n50\n50</code></pre>\n\n<h3 id=\"对数组进行排序\"><a href=\"#对数组进行排序\" class=\"headerlink\" title=\"对数组进行排序\"></a>对数组进行排序</h3><p>通过Arrays类的静态sort()方法可以实现对数组的排序。sort()方法提供了多种重载形式，可对任意类型的数组进行升序排序。</p>\n<p>语法如下</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Arrays.sort(object)</code></pre>\n\n<p>其中，object是指进行排序的数组名称</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424115317314.png\" alt=\"在项目中创建类Taxis，在主方法中创建一维数组，将数组排序后输出。\"></p>\n<p>运行结果如图</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424115332551.png\" alt=\"运行结果\"></p>\n<p>上述实例是对整型数组进行排序。Java中的String类型数组的排序算法是根据字典编排顺序排序的，因此数字排在字母前面，大写字母排在小写字母前面。</p>\n<h3 id=\"复制数组\"><a href=\"#复制数组\" class=\"headerlink\" title=\"复制数组\"></a>复制数组</h3><p>Arrays类的copyOf()方法与copyOfRange()方法可以实现对数组的复制。copyOf()方法是复制数组至指定长度，copyOfRange()方法则将指定数组的指定长度复制到一个新数组中。</p>\n<h4 id=\"（1）-copyOf-方法\"><a href=\"#（1）-copyOf-方法\" class=\"headerlink\" title=\"（1） copyOf()方法\"></a>（1） copyOf()方法</h4><p>该方法提供了多种重载形式，用于满足不同类型数组的复制。语法如下</p>\n<p>  <img src=\"https://img.i-nmb.cn/inmb/wps2.png\" alt=\"img\"></p>\n<p>arr：要进行复制的数组。</p>\n<p>newlength：int型常量，指复制后的新数组的长度。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int[] a &#x3D; &#123;1,2,3,4&#125;;\nint[] a1 &#x3D; Arrays.copyOf(a,2);&#x2F;&#x2F;复制指定的数组长度\nint[] a2 &#x3D; Arrays.copyOf(a,3);\nint[] a3 &#x3D; Arrays.copyOf(a,5);\nSystem.out.println(Arrays.toString(a1));\nSystem.out.println(Arrays.toString(a2));\nSystem.out.println(Arrays.toString(a3));\n</code></pre>\n\n<p>运行结果</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[1, 2] [1, 2, 3] [1, 2, 3, 4, 0]</code></pre>\n\n\n\n<h4 id=\"（2）-copyOfRange-方法\"><a href=\"#（2）-copyOfRange-方法\" class=\"headerlink\" title=\"（2） copyOfRange()方法\"></a>（2） copyOfRange()方法</h4><p>该方法同样提供了多种重载形式</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">copyOfRange(arr,int formIndex,int toIndex)</code></pre>\n\n<p>arr：要进行复制的数组对象。 </p>\n<p>formIndex：指定开始复制数组的索引位置。formIndex必须在0至整个数组的长度之间。新数组包括索引是formIndex的元素。</p>\n<p>toIndex：要复制范围的最后索引位置。可大于数组arr的长度。新数组不包括索引是toIndex的元素。</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424120338695.png\" alt=\"在项目中创建类Repeat，在主方法中创建一维数组，并将数组中索引位置是0~3的元素复制到新数组中，最后将新数组输出。\"></p>\n<p>运行结果如图</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424120355348.png\" alt=\"运行结果\"></p>\n<h3 id=\"数组查询\"><a href=\"#数组查询\" class=\"headerlink\" title=\"数组查询\"></a>数组查询</h3><p>Arrays类的binarySearch()方法，可使用二分搜索法来搜索指定数 组，以获得指定对象。该方法返回要搜索元素的索引值。binarySearch() 方法提供了多种重载形式，用于满足各种类型数组的查找需要。binarySearch()方法有两种参数类型。</p>\n<h4 id=\"（1）-binarySearch-Object-Object-key\"><a href=\"#（1）-binarySearch-Object-Object-key\" class=\"headerlink\" title=\"（1） binarySearch(Object[],Object key)\"></a>（1） binarySearch(Object[],Object key)</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">binarySearch(Object[] a, Object key)</code></pre>\n\n<p>a: 要搜索的数组</p>\n<p>key：要搜索的值</p>\n<p>如果key在数组中，则返回搜索值的索引；否则返回-1或“-”（插入点）。插入点是索引键将要插入数组的那一点，即第一个大于该键的元素的索引。</p>\n<p>技巧：</p>\n<p>[1] 搜索值不是数组元素，且在数组范围内，从1开始计数，得“ - 插入点索引值”；</p>\n<p>[2] 搜索值是数组元素，从0开始计数，得搜索值的索引值；</p>\n<p>[3] 搜索值不是数组元素，且小于数组内元素，索引值为 – 1；</p>\n<p>[4] 搜索值不是数组元素，且大于数组内元素，索引值为 – (length + 1);</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Arrays;\n \npublic class ArraysBinarySearch &#123;\n    public static void main(String[] args) &#123;\n        int arr[] &#x3D; new int[]&#123;3, 5, 7, 9, 11, 13&#125;;\n \n        Arrays.sort(arr);\n \n        for (int i &#x3D; 0; i &lt; 17; i++) &#123;\n            System.out.println(&quot;数字【&quot; + i + &quot;】：&quot; + Arrays.binarySearch(arr, i));\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p>结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">数字【0】：-1\n数字【1】：-1\n数字【2】：-1\n数字【3】：0\n数字【4】：-2\n数字【5】：1\n数字【6】：-3\n数字【7】：2\n数字【8】：-4\n数字【9】：3\n数字【10】：-5\n数字【11】：4\n数字【12】：-6\n数字【13】：5\n数字【14】：-7\n数字【15】：-7\n数字【16】：-7</code></pre>\n\n\n\n<h4 id=\"（2）-binarySearch-Object-int-fromIndex-int-toIndex-Object-key\"><a href=\"#（2）-binarySearch-Object-int-fromIndex-int-toIndex-Object-key\" class=\"headerlink\" title=\"（2） binarySearch(Object[],int fromIndex,int toIndex,Object key)\"></a>（2） binarySearch(Object[],int fromIndex,int toIndex,Object key)</h4><p>该方法在指定的范围内检索某一元素。</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/wps4.png\" alt=\"img\"></p>\n<p>a：要进行检索的数组。</p>\n<p>fromIndex：指定范围的开始处索引（包含）。</p>\n<p>toIndex：指定范围的结束处索引（不包含）。</p>\n<p>key：要搜索的元素。</p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424121753928.png\" alt=\"在项目中创建类Rakel，在主方法中创建String数组，实现查找元素“cd”在指定范围的数组str中的索引位置。\"></p>\n<p><img src=\"https://img.i-nmb.cn/inmb/image-20220424121804351.png\" alt=\"运行结果\"></p>\n","text":"通过阅读本篇，您可以： 掌握一维数组的创建和使用方法 掌握二维数组的创建和使用方法 了解如何遍历数组 了解如何填充替换数组中的元素 了解如何对数组进行排序 了解如何复制数组 了解查询数组的方法 数组概述数组是具有相同数据类型的一组数据的集合。数组中的每个元素具有相同的数据类型。 ...","link":"","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"},{"name":"Eclipse","slug":"Eclipse","count":7,"path":"api/tags/Eclipse.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">数组概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%88%9B%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">一维数组的创建及使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">创建一维数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%88%E5%A3%B0%E6%98%8E%EF%BC%8C%E5%86%8D%E7%94%A8new%E8%BF%90%E7%AE%97%E7%AC%A6%E8%BF%9B%E8%A1%8C%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D\"><span class=\"toc-text\">先声明，再用new运算符进行内存分配</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A3%B0%E6%98%8E%E7%9A%84%E5%90%8C%E6%97%B6%E4%B8%BA%E6%95%B0%E7%BB%84%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98\"><span class=\"toc-text\">声明的同时为数组分配内存</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">初始化一维数组</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">使用一维数组</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%88%9B%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">二维数组的创建及使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">二维数组的创建</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%88%E5%A3%B0%E6%98%8E%EF%BC%8C%E5%86%8D%E7%94%A8new%E8%BF%90%E7%AE%97%E7%AC%A6%E8%BF%9B%E8%A1%8C%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D-1\"><span class=\"toc-text\">先声明，再用new运算符进行内存分配</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89-%E7%9B%B4%E6%8E%A5%E4%B8%BA%E6%AF%8F%E4%B8%80%E7%BB%B4%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4\"><span class=\"toc-text\">（1） 直接为每一维分配内存空间</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89-%E5%88%86%E5%88%AB%E4%B8%BA%E6%AF%8F%E4%B8%80%E7%BB%B4%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98\"><span class=\"toc-text\">（2） 分别为每一维分配内存</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A3%B0%E6%98%8E%E7%9A%84%E5%90%8C%E6%97%B6%E4%B8%BA%E6%95%B0%E7%BB%84%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98-1\"><span class=\"toc-text\">声明的同时为数组分配内存</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">二维数组初始化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">使用二维数组</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">数组的基本操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">遍历数组</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A1%AB%E5%85%85%E6%9B%BF%E6%8D%A2%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">填充替换数组元素</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89-fill-int-a-int-value\"><span class=\"toc-text\">（1） fill(int[] a,int value)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89-fill-int-a-int-fromIndex-int-toIndex-int-value\"><span class=\"toc-text\">（2） fill(int[] a,int fromIndex,int toIndex,int value)</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E6%95%B0%E7%BB%84%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">对数组进行排序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E5%88%B6%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">复制数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89-copyOf-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">（1） copyOf()方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89-copyOfRange-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">（2） copyOfRange()方法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">数组查询</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89-binarySearch-Object-Object-key\"><span class=\"toc-text\">（1） binarySearch(Object[],Object key)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89-binarySearch-Object-int-fromIndex-int-toIndex-Object-key\"><span class=\"toc-text\">（2） binarySearch(Object[],int fromIndex,int toIndex,Object key)</span></a></li></ol></li></ol></li></ol>","author":{"name":"ACbug","slug":"blog-author","avatar":"https://img1.i-nmb.cn/ava.png","link":"/","description":"西北民族大学数学与计算机科学学院<br>系统与软件工作室网络安全组","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JAVA学习知识总汇—JAVA语言基础","uid":"0094475e0b5cfff6e0abbc30d0b5b22d","slug":"JAVA","date":"2022-04-28T02:06:52.000Z","updated":"2022-05-09T12:35:35.957Z","comments":true,"path":"api/articles/JAVA.json","keywords":null,"cover":null,"text":"（以下文章大多参考《Java从入门到精通 第5版 明日科技》。故以下文章不采用 BY-NC-SA 许可协议） JAVA语言基础要掌握并熟练应用Java语言，就需要对Java语言的基础进行充分的了解。 JAVA语言基础 | 一些笔记-i囡漫笔 (i-nmb.cn) 流程控制流程控制...","link":"","photos":[],"count_time":{"symbolsCount":354,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"},{"name":"Eclipse","slug":"Eclipse","count":7,"path":"api/tags/Eclipse.json"}],"author":{"name":"ACbug","slug":"blog-author","avatar":"https://img1.i-nmb.cn/ava.png","link":"/","description":"西北民族大学数学与计算机科学学院<br>系统与软件工作室网络安全组","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Java 字符串—JAVA语言基础","uid":"a0b788c0a9c8204476e0b9b4b152450c","slug":"character-string","date":"2022-04-23T15:44:03.000Z","updated":"2022-05-09T12:36:26.187Z","comments":true,"path":"api/articles/character-string.json","keywords":null,"cover":[],"text":"本篇从创建字符串开始向读者介绍字符串本身的特性，以及字符串上可用的几个操作等。 通过阅读本章，您可以： ​ 掌握字符串的创建方式 ​ 理解字符串连接的方式 ​ 掌握获取字符串信息的方式 ​ 掌握字符串的常用操作 ​ 掌握字符串的格式化方法 ​ 理解正则表达式 ​ 掌握字符串生成器...","link":"","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"},{"name":"Eclipse","slug":"Eclipse","count":7,"path":"api/tags/Eclipse.json"}],"author":{"name":"ACbug","slug":"blog-author","avatar":"https://img1.i-nmb.cn/ava.png","link":"/","description":"西北民族大学数学与计算机科学学院<br>系统与软件工作室网络安全组","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}