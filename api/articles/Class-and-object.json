{"title":"Java对象和类—JAVA语言基础","uid":"476613efa9f6b315a06dafe6bc2ebd45","slug":"Class-and-object","date":"2022-05-09T12:32:46.000Z","updated":"2022-05-09T14:37:48.980Z","comments":true,"path":"api/articles/Class-and-object.json","keywords":null,"cover":[],"content":"<ul>\n<li><strong>对象</strong>：对象是类的一个实例（<strong>对象不是找个女朋友</strong>），有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</li>\n<li><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</li>\n</ul>\n<img src=\"https://img1.i-nmb.cn/img/object-class.jpg\" alt=\"object-class\" style=\"zoom:80%;\" />\n\n\n\n<p>下面我们大致具体了解一下在Java中类和面向对象</p>\n<h2 id=\"面向对象概述\"><a href=\"#面向对象概述\" class=\"headerlink\" title=\"面向对象概述\"></a>面向对象概述</h2><h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><p>对象是事物存在的实体，如人、书桌、计算机、高楼大厦等。</p>\n<p>人类解决问题的方式总是将复杂的事物简单化，于是就会思考这些对象都是由哪些部分组成的。通常都会将对象划分为两个部分，即<strong>静态部分</strong>与<strong>动态部分</strong>。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>静态部分：被称为“属性”。属性包括高矮、胖瘦、性别、年龄等</p>\n<p>动态部分：个人具备的行为（动态部分）。哭泣、微笑、说话、行走</p></blockquote>\n<p>例如，现在面临一只大雁要从北方飞往南方这样一个实际问题</p>\n<p>1.识别这个对象的属性。对象具备的属性都是静态属性， 如大雁有一对翅膀、黑色的羽毛等</p>\n<p>2.接着识别这个对象的<u>动态行为</u>，即这只大雁可以进行的动作，如飞行、觅食等，这些行为都是这个对象基于其属性而<u>具有的动作</u>。</p>\n<p>3.识别出这个对象的属性和行为后，这个对象就被定义完成了。</p>\n<p>所有的大雁都具有以上的属性和行为，可以将这些属性和行为封装起来，以描述大雁这类动物。</p>\n<p><strong>类实质上就是封装对象属性和行为的载体，而对象则是类抽象出来的一个实例</strong></p>\n<img src=\"https://img1.i-nmb.cn/img/%E5%A4%A7%E9%9B%81%EF%BC%88%E7%B1%BB%EF%BC%89.png\" alt=\"大雁(类)\" style=\"zoom:50%;\" />\n\n\n\n<h3 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h3><p><strong>类就是同一类事物的统称</strong>，如鸟类、家禽类、人类等</p>\n<p><strong>类是构造对象时所依赖的规范</strong>，如一只鸟有一对翅膀，它可以用这对翅膀飞行，而基本上所有的鸟都具有有翅膀这个特性和飞行的技能，这样具有相同特性和行为的一类事物就称为类。</p>\n<p>类的思想就是这样产生的</p>\n<p>类是封装对象的属性和行为的载体，反过来说，<u>具有相同属性和行为的一类实体被称为类</u>。</p>\n<p>类中对象的行为是以方法的形式定义的，对象的属性是以成员变量的形式定义的，所以类包括对象的属性和方法。</p>\n<h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><p>面向对象程序设计具有以下特点：</p>\n<ul>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n封装性</p>\n</li>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n继承性</p>\n</li>\n<li><p><input checked=\"\" disabled=\"\" type=\"checkbox\"> \n多态性</p>\n</li>\n</ul>\n<p>封装是面向对象编程的核心思想。将对象的属性和行为封装起来， 其载体就是类</p>\n<p>采用封装的思想保证了类内部数据结构的完整性，应用该类的用户不能轻易地直接操作此数据结构，只能执行类允许公开的数据。这样就避免了外部操作对内部数据的影响，提高了程序的可维护性。</p>\n  <img src=\"https://img1.i-nmb.cn/img/wps1.png\" alt=\"类\" style=\"zoom:125%;\" />\n\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>类与类之间同样具有关系，这种关系被称为关联。</p>\n<p>例如，一个百货公司类与销售员类就是一个关联，学生类与教师类也是一个关联。两个类之间的关系有很多种，继承是关联中的一种。</p>\n<p>当处理一个问题时，可以将一些有用的类保留下来，在遇到同样问题时拿来复用。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>由于鸽子属于鸟类，具有与鸟类相同的属性和行为，便可以在创建信鸽类时将鸟类拿来复用</p>\n<p>此外还需要再添加一些信鸽具有的独特属性及行为</p></blockquote>\n<p>鸽子类保留了鸟类的属性和行为，这样就节省了定义鸟和鸽子共同具有的属性和行为的时间，这就是继承的基本思想</p>\n<p>继承性主要利用特定对象之间的共有属性</p>\n<p>这里可以将平行四边形类看作是从四边形类中继承的。在Java语言中将类似于平行四边形的类称为子类，将类似于四边形的类称为父类或超类。</p>\n<p><img src=\"https://img1.i-nmb.cn/img/image-20220509214849547.png\" alt=\"image-20220509214849547\"></p>\n<h3 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h3><p><strong>将父类对象应用于子类的特征就是多态</strong></p>\n<p>如果将子类的对象统一看作是父类的实例对象，这样当绘制图形时，简单地调用父类也就是图形类绘制图形的方法即可绘制任何图形，这就是多态最基本的思想。</p>\n<p>其优点是：由于整个事件的处理都只依赖于父类的方法， 所以日后只要维护和调整父类的方法即可，这样就降低了维护的难度， 节省了时间。</p>\n<p>多态的实现并不依赖于具体类，而是<u>依赖于抽象类和接口</u></p>\n<p>图形类作为所有图形的父类，具有绘制图形的能力，这个方法可以称为“绘制图形”，但如果要执行这个“绘制图形”的命令，没有人知道应该画什么样的图形，并且如果要在图形类中抽象出一个图形对象，没有人能说清这个图形究竟是什么图形，<strong>所以使用“抽象”这个词来描述图形类比较恰当</strong>。在Java语言中称这样的类为抽象类，抽象类不能实例化对象。在多态的机制中，父类通常会被定义为抽象类，<strong>在抽象类中给出一个方法的标准</strong>，而不给出实现的具体流程。实质上这个方法也是抽象的，如图形类中的“绘制图形”方法<u>只提供一个可以绘制图形的<strong>标准</strong></u>，并没有提供具体绘制图形的流程，因为没有人知道究竟需要绘制什么形状的图形。</p>\n<p><u>也就是说，<strong>父类只给出绘制图形的方法，但是不给出如何准确的画一个准确的三角形或四边形等特定图形</strong></u></p>\n<p>比抽象类更方便的方式是将抽象类定义为接口。由抽象方法组成的集合就是接口。</p>\n<p>可能螺丝帽和螺丝钉的厂家不同，但这两个物品可以轻易地组合在一起，这是因为生产螺丝帽和螺丝钉的厂家都遵循着一个标准，这个标准在Java中就是接口。</p>\n<h2 id=\"类-1\"><a href=\"#类-1\" class=\"headerlink\" title=\"类\"></a>类</h2><p>类是封装对象的属性和行为的载体</p>\n<h3 id=\"成员变量\"><a href=\"#成员变量\" class=\"headerlink\" title=\"成员变量\"></a>成员变量</h3><p>在Java中对象的属性也称为成员变量。</p>\n<p>首先定义一个图书类，成员变量对应于类对象的属性，在Book类中设置3个成员变量，分别为id、name和category，分别对应于图书编号、图书名称和图书类别3个图书属性。</p>\n<img src=\"https://img1.i-nmb.cn/img/image-20220509220018538.png\" alt=\"在项目中创建Book类，在该类中定义并使用成员变量\" style=\"zoom:120%;\" />\n\n<p>根据以上代码，读者可以看到在Java中使用class关键字来定义类， Book是类的名称。同时在Book类中定义了3个成员变量，成员变量的类型可以设置为Java中合法的数据类型，其实成员变量就是普通的变量， 可以为它设置初始值，也可以不设置初始值。如果不设置初始值，则会有默认值。读者应该注意到在3个成员变量前面的private关键字，它用来定义一个私有成员（文章后面会介绍）</p>\n<h3 id=\"成员方法\"><a href=\"#成员方法\" class=\"headerlink\" title=\"成员方法\"></a>成员方法</h3><p>在Java语言中使用成员方法对应于类对象的行为。以Book类为例， 它包含getName()和setName()两个方法，这两个成员方法分别为获取图书名称和设置图书名称的方法。</p>\n<p>定义成员方法的语法格式如下：</p>\n<p><img src=\"https://img1.i-nmb.cn/img/image-20220509220509233.png\" alt=\"语法格式\"></p>\n<p>一个个成员方法可以有参数，这个参数可以是对象，也可以是基本数据类型的变量，同时成员方法有返回值和不返回任何值的选择，如果方法需要返回值，可以在方法体中使用return关键字，使用这个关键字后，方法的执行将被终止。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Java中的成员方法无返回值，可以使用void关键字表示。</p></blockquote>\n<h3 id=\"权限修饰符\"><a href=\"#权限修饰符\" class=\"headerlink\" title=\"权限修饰符\"></a>权限修饰符</h3><p><img src=\"https://img1.i-nmb.cn/img/image-20220509220608980.png\" alt=\"Java语言中的修饰符权限\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>当声明类时不使用public、protected和private修饰符设置类的权限，则这个类预设为包存取范围，即只有一个包中的类可以调用这个类的成员变量或成员方法。</p></blockquote>\n<p><img src=\"https://img1.i-nmb.cn/img/image-20220509221237131.png\" alt=\"在项目中的com.lzw包下创建AnyClass类，该类使用默认的访问权限。\"></p>\n<p>由于类的修饰符为默认修饰符，即只有一个包内的其他类和子类可以对该类进行访问，而AnyClass类中的doString()方法却又被设置为public访问权限，即使这样，doString()方法的访问权限依然与AnyClass类的访问权限相同，因为Java语言规定，类的权限设定会约束类成员的权限设定</p>\n<img src=\"https://img1.i-nmb.cn/img/image-20220509222330617.png\" alt=\"image-20220509222330617\" style=\"zoom:50%;\" />\n\n<p>本实例等同于</p>\n<p><img src=\"https://img1.i-nmb.cn/img/image-20220509222445610.png\" alt=\"本实例等同于\"></p>\n<h3 id=\"局部变量\"><a href=\"#局部变量\" class=\"headerlink\" title=\"局部变量\"></a>局部变量</h3><img src=\"https://img1.i-nmb.cn/img/image-20220509220018538.png\" alt=\"在项目中创建Book类，在该类中定义并使用成员变量\" style=\"zoom:120%;\" />\n\n<p>定义的Book类中，getName()方法的<strong>id变量即为局部变量</strong>。实际上方法中的形参也可作为一个局部变量，如在定义setName(String name)方法时，String name这个形参就被看作是局部变量。</p>\n<p>局部变量是在方法被执行时创建，在方法执行结束时被销毁。</p>\n<p>使用时必须进行赋值操作或被初始化，否则会出现编译错误</p>\n<p><img src=\"https://img1.i-nmb.cn/img/image-20220509222718106.png\" alt=\"在项目中创建一个类文件，在该类中定义getName()方法并进行调用\"></p>\n<p>如果将id这个局部变量的初始值去掉，编译器将出现错误</p>\n<h3 id=\"局部变量的有效范围\"><a href=\"#局部变量的有效范围\" class=\"headerlink\" title=\"局部变量的有效范围\"></a>局部变量的有效范围</h3><p>可以将局部变量的有效范围称为变量的作用域，局部变量的有效范围从该变量的声明开始到该变量的结束为止。</p>\n<img src=\"https://img1.i-nmb.cn/img/image-20220509223033723.png\" alt=\"描述了局部变量的作用范围\" style=\"zoom:70%;\" />\n\n<p>在相互不嵌套的作用域中可以同时声明两个名称和类型相同的局部变量</p>\n<img src=\"https://img1.i-nmb.cn/img/image-20220509223118827.png\" alt=\"如图\" style=\"zoom:70%;\" />\n\n<p>但是在相互嵌套的区域中不可以这样声明，如果将局部变量id在方法体的for循环中再次定义，编译器将会报错</p>\n<img src=\"https://img1.i-nmb.cn/img/image-20220509223217979.png\" alt=\"如图\" style=\"zoom:70%;\" />\n\n\n\n<h3 id=\"this关键字\"><a href=\"#this关键字\" class=\"headerlink\" title=\"this关键字\"></a><strong>this</strong>关键字</h3><p>在项目中创建一个类文件，该类中定义了setName()，并将方法的参数值赋予类中的成员变量</p>\n<p><img src=\"https://img1.i-nmb.cn/img/image-20220509223327907.png\" alt=\"类中定义了setName()\"></p>\n<p>在Java语言中规定使用this关键字来代表本类对象的引用嘛，this.name指的就是Book类中的name成员变量，而this.name&#x3D;name语句中的第二个name则指的是形参name。</p>\n<p>this可以调用成员变量和成员方法，但Java语言中最常规的调用方式是使用“对象.成员变量”或“对象.成员方法”进行调用</p>\n<p>事实上，this引用的就是本类的一个对象。在局部变量或方法参数覆盖了成员变量时，如上面代码的情况，就要添加this关键字明确引用的是类成员还是局部变量或方法参数。</p>\n<p>如果省略this关键字直接写成name &#x3D; name，那只是把参数name赋值给参数变量本身而已，成员变量name的值没有改变，因为参数name在方法的作用域中覆盖了成员变量name。</p>\n<p>this除了可以调用成员变量或成员方法之外，还可以作为方法的返回值。</p>\n<p><img src=\"https://img1.i-nmb.cn/img/image-20220509223737656.png\" alt=\"在项目中创建一个类文件，在该类中定义Book类型的方法，并通过this关键字进行返回\"></p>\n","text":" 对象：对象是类的一个实例（对象不是找个女朋友），有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。 类：类是一个模板，它描述一类对象的行为和状态。 下面我们大致具体了解一下在Java中类和面向对象 面向对象概述对象对象是事物存在的实体...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"Eclipse","slug":"Eclipse","count":7,"path":"api/tags/Eclipse.json"},{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">面向对象概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B1%BB\"><span class=\"toc-text\">类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%81%E8%A3%85\"><span class=\"toc-text\">封装</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">继承</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E6%80%81\"><span class=\"toc-text\">多态</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB-1\"><span class=\"toc-text\">类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">成员变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">成员方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6\"><span class=\"toc-text\">权限修饰符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">局部变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E6%9C%89%E6%95%88%E8%8C%83%E5%9B%B4\"><span class=\"toc-text\">局部变量的有效范围</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#this%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">this关键字</span></a></li></ol></li></ol>","author":{"name":"ACbug","slug":"blog-author","avatar":"https://img1.i-nmb.cn/ava.png","link":"/","description":"西北民族大学数学与计算机科学学院<br>系统与软件工作室网络安全组","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"懒加载(lazyload/lozad)和Valine评论系统的头像、表情冲突","uid":"fbf2013fd372815138afff9263093bc8","slug":"lazyload-bug","date":"2022-05-12T13:49:09.000Z","updated":"2022-05-12T15:44:38.743Z","comments":true,"path":"api/articles/lazyload-bug.json","keywords":null,"cover":[],"text":"问题现象在使用lozad.js的情况下，同时使用了Valine评论系统，就会出现头像、表情不显示的问题。百度也一直找不到问题所在。 如图 问题分析在F12开发者工具下，看到所有的src变成了data-src，导致了src没有数据 查看代码，发现他把src一律转换成了data-sr...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"hexo","slug":"hexo","count":5,"path":"api/tags/hexo.json"},{"name":"NexT","slug":"NexT","count":5,"path":"api/tags/NexT.json"},{"name":"lozad","slug":"lozad","count":1,"path":"api/tags/lozad.json"},{"name":"Valine","slug":"Valine","count":1,"path":"api/tags/Valine.json"}],"author":{"name":"ACbug","slug":"blog-author","avatar":"https://img1.i-nmb.cn/ava.png","link":"/","description":"西北民族大学数学与计算机科学学院<br>系统与软件工作室网络安全组","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"在NexT的侧边栏添加近期文章板块","uid":"c5b29c51d4e2d58a38adb96d31b1d4ab","slug":"Recent-articles","date":"2022-05-03T02:33:52.000Z","updated":"2022-05-03T10:03:16.032Z","comments":true,"path":"api/articles/Recent-articles.json","keywords":null,"cover":[],"text":"最近听说内链可以改善SEO，于是乎，我想在NexT的侧边栏添加近期文章板块 在网络上查找的方案大致如下 第一种方法&#123;% if theme.recent_posts %&#125; &lt;div class&#x3D;&quot;links-of-blogroll mo...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"hexo","slug":"hexo","count":5,"path":"api/tags/hexo.json"},{"name":"NexT","slug":"NexT","count":5,"path":"api/tags/NexT.json"}],"author":{"name":"ACbug","slug":"blog-author","avatar":"https://img1.i-nmb.cn/ava.png","link":"/","description":"西北民族大学数学与计算机科学学院<br>系统与软件工作室网络安全组","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}